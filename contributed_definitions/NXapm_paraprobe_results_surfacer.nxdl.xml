<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
# 
# Copyright (C) 2014-2022 NeXus International Advisory Committee (NIAC)
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="application" name="NXapm_paraprobe_results_surfacer" extends="NXobject" type="group" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
             The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
        <symbol name="n_ions">
            <doc>
                 The total number of ions in the reconstruction.
            </doc>
        </symbol>
        <symbol name="n_v_tri">
            <doc>
                 The number of vertices of the alpha complex.
            </doc>
        </symbol>
        <symbol name="n_f_tri">
            <doc>
                 The number of faces of the alpha complex.
            </doc>
        </symbol>
        <symbol name="n_f_tri_xdmf">
            <doc>
                 The total number of XDMF values to represent all faces of triangles via XDMF.
            </doc>
        </symbol>
        <symbol name="n_f_tet_xdmf">
            <doc>
                 The total number of XDMF values to represent all faces of tetrahedra via XDMF.
            </doc>
        </symbol>
    </symbols>
    <doc>
         Results of a paraprobe-surfacer tool run.
    </doc>
    <!--by default for appdefs the value of the exists keyword is required
unless it is explicitly specified differently-->
    <group type="NXentry" minOccurs="1" maxOccurs="1">
        <attribute name="version">
            <doc>
                 Version specifier of this application definition.
            </doc>
        </attribute>
        <!--##MK::begin of the tool-specific section-->
        <field name="definition">
            <doc>
                 Official NeXus NXDL schema with which this file was written.
            </doc>
            <enumeration>
                <item value="NXapm_paraprobe_results_surfacer"/>
            </enumeration>
        </field>
        <!--##MK::end of the tool-specific section-->
        <field name="program">
            <doc>
                 Given name of the program/software/tool with which this NeXus
                 (configuration) file was generated.
            </doc>
            <attribute name="version">
                <doc>
                     Ideally program version plus build number, or commit hash or description
                     of ever persistent resources where the source code of the program and
                     build instructions can be found so that the program can be configured
                     ideally in such a manner that the result of this computational process
                     is recreatable in the same deterministic manner.
                </doc>
            </attribute>
        </field>
        <field name="analysis_identifier">
            <doc>
                 Ideally, a (globally persistent) unique identifier for referring
                 to this analysis.
            </doc>
        </field>
        <field name="analysis_description" optional="true">
            <doc>
                 Possibility for leaving a free-text description about this analysis.
            </doc>
        </field>
        <field name="start_time" type="NX_DATE_TIME">
            <doc>
                 ISO 8601 formatted time code with local time zone offset to UTC
                 information included when the analysis behind this results file
                 was started, i.e. the paraprobe-tool executable started as a process.
            </doc>
        </field>
        <field name="end_time" type="NX_DATE_TIME">
            <doc>
                 ISO 8601 formatted time code with local time zone offset to UTC
                 information included when the analysis behind this results file
                 were completed and the paraprobe-tool executable exited as a process.
            </doc>
        </field>
        <field name="config_filename">
            <doc>
                 The absolute path and name of the config file for this analysis.
            </doc>
            <attribute name="version">
                <doc>
                     At least SHA256 strong hash of the specific config_file for
                     tracking provenance.
                </doc>
            </attribute>
        </field>
        <field name="results_path" optional="true">
            <doc>
                 Path to the directory where the tool should store NeXus/HDF5 results
                 of this analysis. If not specified results will be stored in the
                 current working directory.
            </doc>
        </field>
        <field name="status">
            <doc>
                 A statement whether the paraprobe-tool executable managed to
                 process the analysis or failed prematurely.
                 
                 This status is written to the results file after the end_time
                 at which point the executable must not compute any analysis.
                 Only when this status message is present and shows `success`, the
                 user should consider the results. In all other cases it might be
                 that the executable has terminated prematurely or another error
                 occurred.
            </doc>
            <enumeration>
                <item value="success"/>
                <item value="failure"/>
            </enumeration>
        </field>
        <group type="NXuser" recommended="true">
            <doc>
                 If used, contact information and eventually details
                 of at least the person who performed this analysis.
            </doc>
            <field name="name"/>
            <field name="affiliation" recommended="true"/>
            <field name="address" optional="true"/>
            <field name="email" recommended="true"/>
            <field name="orcid" recommended="true"/>
            <field name="orcid_platform" recommended="true"/>
            <field name="telephone_number" optional="true"/>
            <field name="role" recommended="true"/>
            <field name="social_media_name" optional="true"/>
            <field name="social_media_platform" optional="true"/>
        </group>
        <group type="NXcoordinate_system_set">
            <doc>
                 Details about the coordinate system conventions used.
            </doc>
            <group type="NXtransformations" minOccurs="1" maxOccurs="unbounded">
                <doc>
                     The individual coordinate systems which should be used.
                     Field names should be prefixed with the following controlled terms
                     indicating which individual coordinate system is described:
                     
                     * paraprobe
                     * lab
                     * specimen
                     * laser
                     * leap
                     * detector
                     * recon
                </doc>
            </group>
        </group>
        <!--##MK::begin of the tool-specific section-->
        <group type="NXprocess" minOccurs="0" maxOccurs="1">
            <group name="window" type="NXcs_filter_boolean_mask">
                <doc>
                     A bitmask which identifies which of the ions in the dataset were
                     analyzed. Computations of alpha complexes may have filtered this
                     ion set further but this process is deterministic.
                </doc>
                <field name="number_of_ions" type="NX_UINT" units="NX_UNITLESS">
                    <doc>
                         Number of ions covered by the mask. The mask may be 0 for most.
                    </doc>
                </field>
                <field name="bitdepth" type="NX_UINT" units="NX_UNITLESS">
                    <doc>
                         Number of bits assumed matching on a default datatype.
                         (e.g. 8 bits for a C-style uint8).
                    </doc>
                </field>
                <field name="mask" type="NX_UINT" units="NX_UNITLESS">
                    <doc>
                         The unsigned integer array representing the content of the mask.
                         If padding is used the padded bits are set to 0. The mask is for
                         convenience always as large as the entire dataset as it will
                         be stored compressed anyway. The convenience feature with this
                         is that then the mask can be decoded with numpy and mirrored
                         against the evaporation_id array and one immediately can filter
                         out all points that were used by the paraprobe.
                         The length of the array adds to the next unsigned integer
                         if the number of ions in the dataset is not an integer
                         multiple of the bitdepth.
                    </doc>
                    <dimensions rank="1">
                        <dim index="1" value="i"/>
                    </dimensions>
                </field>
            </group>
            <group name="POINT_SET_WRAPPING" type="NXprocess" minOccurs="0" maxOccurs="unbounded">
                <doc>
                     Paraprobe-surfacer can be used to load a ROI that is the entire or a
                     sub-set of the ion point cloud. In the point_cloud_wrapping process
                     the tool computes a triangulated surface mesh which encloses the
                     ROI/point cloud. This mesh can be seen as a model for the edge of
                     the dataset.
                     Different algorithms can be used with paraprobe-surfacer to create
                     this mesh such as convex hulls, alpha-shapes as their generalization,
                     or alpha wrappings.
                     Ideally, the resulting mesh should be a watertight polyhedron.
                     This polyhedron is not necessarily convex. For some algorithms there
                     is no guarantee that the resulting mesh yields a watertight mesh.
                </doc>
                <!--(NXcg_grid): currently we do not store the underlying grid
for eventually performed preprocessing-->
                <group name="alpha_complex" type="NXcg_alpha_complex" minOccurs="0" maxOccurs="unbounded">
                    <group name="window" type="NXcs_filter_boolean_mask">
                        <doc>
                             A bitmask which identifies exactly all those ions whose positions
                             were considered when defining the filtered point set from which
                             the alpha complex was then in fact computed. This window
                             can be different to the entire window as irrelevant ions might
                             have been filtered out to reduce the computational costs of the
                             alpha complex analysis.
                        </doc>
                        <!--filtered in addition to the ROI or again the entire dataset-->
                        <field name="number_of_ions" type="NX_UINT" units="NX_UNITLESS">
                            <doc>
                                 Number of ions covered by the mask.
                                 The mask value for most may be 0.
                            </doc>
                        </field>
                        <!--which does paraprobe use-->
                        <field name="bitdepth" type="NX_UINT" units="NX_UNITLESS">
                            <doc>
                                 Number of bits assumed matching on a default datatype.
                                 (e.g. 8 bits for a C-style uint8).
                            </doc>
                        </field>
                        <field name="mask" type="NX_UINT" units="NX_UNITLESS">
                            <doc>
                                 The unsigned integer array representing the content of the mask.
                                 If padding is used the padded bits are set to 0. The mask is for
                                 convenience always as large as the entire dataset as it will
                                 be stored compressed anyway. The convenience feature with this
                                 is that then the mask can be decoded with numpy and mirrored
                                 against the evaporation_id array and one immediately can filter
                                 out all points that were used by the paraprobe.
                                 The length of the array adds to the next unsigned integer
                                 if the number of ions in the dataset is not an integer
                                 multiple of the bitdepth.
                            </doc>
                            <dimensions rank="1">
                                <dim index="1" value="n_ions"/>
                            </dimensions>
                        </field>
                    </group>
                    <field name="dimensionality" type="NX_UINT" units="NX_UNITLESS">
                        <enumeration>
                            <item value="2"/>
                            <item value="3"/>
                        </enumeration>
                    </field>
                    <field name="type">
                        <enumeration>
                            <item value="convex_hull"/>
                            <item value="alpha_shape"/>
                            <item value="alpha_wrapping"/>
                            <item value="other"/>
                            <item value="undefined"/>
                        </enumeration>
                    </field>
                    <field name="mode">
                        <enumeration>
                            <item value="general"/>
                            <item value="regularized"/>
                        </enumeration>
                    </field>
                    <field name="alpha" type="NX_NUMBER" units="NX_LENGTH"/>
                    <field name="offset" type="NX_NUMBER" optional="true" units="NX_LENGTH"/>
                    <group name="triangle_set" type="NXcg_triangle_set" optional="true">
                        <doc>
                             The set of triangles in the coordinate system paraprobe
                             which discretizes the exterior surface of the alpha complex.
                        </doc>
                        <field name="identifier_offset" type="NX_INT" units="NX_UNITLESS">
                            <doc>
                                 Integer which specifies the first index to be used for distinguishing
                                 triangles. Identifiers are defined either implicitly or explicitly.
                                 For implicit indexing the identifiers are defined on the
                                 interval [identifier_offset, identifier_offset+c-1].
                            </doc>
                        </field>
                        <group name="triangles" type="NXcg_face_list_data_structure">
                            <field name="dimensionality" type="NX_POSINT" units="NX_UNITLESS"/>
                            <field name="number_of_vertices" type="NX_POSINT" units="NX_UNITLESS">
                                <doc>
                                     Number of vertices.
                                </doc>
                            </field>
                            <field name="number_of_faces" type="NX_POSINT" units="NX_UNITLESS">
                                <doc>
                                     Number of faces.
                                </doc>
                            </field>
                            <field name="vertex_identifier_offset" type="NX_INT" units="NX_UNITLESS"/>
                            <field name="face_identifier_offset" type="NX_INT" units="NX_UNITLESS"/>
                            <field name="vertices" type="NX_FLOAT" units="NX_LENGTH">
                                <dimensions rank="2">
                                    <dim index="1" value="n_v_tri"/>
                                    <dim index="2" value="3"/>
                                </dimensions>
                            </field>
                            <field name="faces" type="NX_UINT" units="NX_UNITLESS">
                                <dimensions rank="2">
                                    <dim index="1" value="n_f_tri"/>
                                    <dim index="2" value="3"/>
                                </dimensions>
                            </field>
                            <field name="xdmf_topology" type="NX_UINT" units="NX_UNITLESS">
                                <doc>
                                     A list of as many tuples of XDMF topology key, XDMF number
                                     of vertices and a triple of vertex indices specifying each
                                     triangle. The total number of entries is n_f_tri * (1+1+3).
                                </doc>
                                <dimensions rank="1">
                                    <dim index="1" value="n_f_tri_xdmf"/>
                                </dimensions>
                            </field>
                        </group>
                        <field name="is_watertight" type="NX_BOOLEAN" optional="true">
                            <doc>
                                 Do the triangles define a triangulated surface mesh which
                                 is watertight?
                            </doc>
                        </field>
                        <field name="volume" type="NX_FLOAT" optional="true" units="NX_VOLUME">
                            <doc>
                                 The volume which the triangulated surface mesh encloses
                                 provided that the mesh is watertight.
                            </doc>
                        </field>
                    </group>
                    <group name="interior_tetrahedra" type="NXcg_tetrahedron_set" optional="true">
                        <doc>
                             The set of tetrahedra which represent the interior volume of the
                             complex if that is a closed 2-manifold.
                        </doc>
                        <field name="identifier_offset" type="NX_INT" units="NX_UNITLESS">
                            <doc>
                                 Integer which specifies the first index to be used for distin-
                                 guishing tetrahedra. Identifiers are defined either implicitly
                                 or explicitly. For implicit indexing the identifiers are defined
                                 on the interval [identifier_offset, identifier_offset+c-1].
                                 For explicit indexing the identifier array has to be defined.
                            </doc>
                        </field>
                        <field name="volume" type="NX_FLOAT" optional="true" units="NX_VOLUME">
                            <doc>
                                 The accumulated volume of all interior tetrahedra.
                            </doc>
                        </field>
                        <group name="tetrahedra" type="NXcg_face_list_data_structure" optional="true">
                            <field name="number_of_vertices" type="NX_POSINT" units="NX_UNITLESS">
                                <doc>
                                     Number of vertices.
                                </doc>
                            </field>
                            <field name="number_of_faces" type="NX_POSINT" units="NX_UNITLESS">
                                <doc>
                                     Number of faces.
                                </doc>
                            </field>
                            <field name="vertex_identifier_offset" type="NX_INT" units="NX_UNITLESS"/>
                            <field name="face_identifier_offset" type="NX_INT" units="NX_UNITLESS"/>
                            <field name="vertices" type="NX_FLOAT" units="NX_LENGTH">
                                <dimensions rank="2">
                                    <dim index="1" value="n_v_tet"/>
                                    <dim index="2" value="3"/>
                                </dimensions>
                            </field>
                            <field name="xdmf_topology" type="NX_UINT" units="NX_UNITLESS">
                                <doc>
                                     A list of as many tuples of XDMF topology key, XDMF number
                                     of vertices and a triple of vertex indices specifying each
                                     triangle. The total number of entries is n_f_tet * (1+1+4).
                                </doc>
                                <dimensions rank="1">
                                    <dim index="1" value="n_f_tet_xdmf"/>
                                </dimensions>
                            </field>
                        </group>
                    </group>
                </group>
            </group>
            <group name="TRIANGLE_SET_WRAPPING" type="NXprocess" minOccurs="0" maxOccurs="unbounded">
                <doc>
                     In the future we may want to wrap other primitives
                     like triangles or polylines.
                </doc>
            </group>
        </group>
        <!--##MK::end of the tool-specific section-->
        <group name="performance" type="NXcs_profiling" recommended="true">
            <field name="current_working_directory"/>
            <field name="command_line_call" optional="true"/>
            <field name="start_time" type="NX_DATE_TIME" recommended="true"/>
            <field name="end_time" type="NX_DATE_TIME" recommended="true"/>
            <field name="total_elapsed_time" type="NX_NUMBER"/>
            <field name="number_of_processes" type="NX_POSINT"/>
            <field name="number_of_threads" type="NX_POSINT"/>
            <field name="number_of_gpus" type="NX_POSINT"/>
            <group type="NXcs_computer" recommended="true">
                <field name="name" recommended="true"/>
                <field name="operating_system">
                    <attribute name="version"/>
                </field>
                <field name="uuid" optional="true"/>
                <group type="NXcs_cpu" minOccurs="0" maxOccurs="unbounded">
                    <field name="name" optional="true"/>
                    <group type="NXfabrication" recommended="true">
                        <field name="identifier" optional="true"/>
                        <field name="capabilities" optional="true"/>
                    </group>
                </group>
                <group type="NXcs_gpu" minOccurs="0" maxOccurs="unbounded">
                    <field name="name" optional="true"/>
                    <group type="NXfabrication" recommended="true">
                        <field name="identifier" optional="true"/>
                        <field name="capabilities" optional="true"/>
                    </group>
                </group>
                <group type="NXcs_mm_sys" minOccurs="0" maxOccurs="1">
                    <field name="total_physical_memory" type="NX_NUMBER"/>
                </group>
                <group type="NXcs_io_sys" minOccurs="0" maxOccurs="1">
                    <group type="NXcs_io_obj" minOccurs="1" maxOccurs="unbounded">
                        <field name="technology"/>
                        <field name="max_physical_capacity" type="NX_NUMBER"/>
                        <field name="name" optional="true"/>
                        <group type="NXfabrication" recommended="true">
                            <field name="identifier" optional="true"/>
                            <field name="capabilities" optional="true"/>
                        </group>
                    </group>
                </group>
                <group type="NXcs_profiling_event">
                    <field name="start_time" type="NX_DATE_TIME" optional="true"/>
                    <field name="end_time" type="NX_DATE_TIME" optional="true"/>
                    <field name="description"/>
                    <field name="elapsed_time" type="NX_NUMBER"/>
                    <field name="number_of_processes" type="NX_POSINT">
                        <!--exists: recommended-->
                        <doc>
                             Specify if it was different from the number_of_processes
                             in the NXcs_profiling super class.
                        </doc>
                    </field>
                    <field name="number_of_threads" type="NX_POSINT">
                        <!--exists: recommended-->
                        <doc>
                             Specify if it was different from the number_of_threads
                             in the NXcs_profiling super class.
                        </doc>
                    </field>
                    <field name="number_of_gpus" type="NX_POSINT">
                        <!--exists: recommended-->
                        <doc>
                             Specify if it was different from the number_of_threads
                             in the NXcs_profiling super class.
                        </doc>
                    </field>
                    <field name="max_virtual_memory_snapshot" type="NX_NUMBER" recommended="true"/>
                    <field name="max_resident_memory_snapshot" type="NX_NUMBER" recommended="true"/>
                </group>
            </group>
        </group>
    </group>
</definition>
