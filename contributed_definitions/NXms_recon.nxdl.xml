<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2014-2024 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<!--
position would need another depends_on the specific coordinate system used, currently we assume McStas
roi1/ebsd/microstructure1-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" type="group" name="NXms_recon" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
             The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
        <!--in so-called linear intercept analysis we observe
one-dimensional sections of either projections (see below)
or true one-dimensional cuts across a volume of material
n_icept: |
  The number of linear intercepts defined.
n_c_one: |
  The number of crystal projections segmented by crossing (projected or real) interfaces
n_i_one: |
  The number of crossings
two-dimensional projections of characterized in reality three-dimensional objects
using E. E. Underwood notation
crystals/grains are projections that are delineated by projections of interface, i.e. interface lines which meet at projections of triple lines i.e. triple "points"-->
        <symbol name="n_c_two">
            <doc>
                 The number of crystal projections.
            </doc>
        </symbol>
        <symbol name="n_i_two">
            <doc>
                 The number of interface projections.
            </doc>
        </symbol>
        <symbol name="n_t_two">
            <doc>
                 The number of assumed triple junction projections aka triple points.
            </doc>
        </symbol>
        <!--three-dimensional real objects, volumetrically characterized
crystals are delineated by interfaces that are delineated by triple lines that meet at quad junctions-->
        <symbol name="n_c">
            <doc>
                 The number of crystals.
            </doc>
        </symbol>
        <symbol name="n_i">
            <doc>
                 The number of interfaces
            </doc>
        </symbol>
        <symbol name="n_t">
            <doc>
                 The number of triple lines
            </doc>
        </symbol>
        <symbol name="n_q">
            <doc>
                 The number of quadruple junctions.
            </doc>
        </symbol>
    </symbols>
    <doc>
         Base class to describe discretized (micro)structural features of a material.
         
         One instance of this base class can be used to describe the current configuration
         the base class does not include time-dependent descriptions for the sake of
         clarity and because of the fact that virtually all simulations or experiments
         probe time by sampling. Therefore, time-dependent state descriptions should
         be realized with creating a set of :ref:`NXms_snapshot_set` with instances of
         :ref:`NXms_snapshot` using e.g. :ref:`NXms_recon` base class instances.
    </doc>
    <!--as e.g. a result of one grain reconstruction with MTex or othe
grain reconstruction software in commercial tools
the idea is we may wish to run as many grain reconstructions as we want...
add details about the processing-->
    <group name="configuration" type="NXprocess">
        <doc>
             The configuration and parameterization of the reconstruction algorithm
             whereby the microstructural features were identified.
        </doc>
        <!--maybe a depends_on what was the input however if the group is injected
in an roi1/ebsd instance isnt this information implicit?-->
        <field name="dimensionality" type="NX_POSINT" units="NX_UNITLESS">
            <doc>
                 Dimensionality of the analysis.
                 
                 This field can be used e.g. by a research data management system
                 to identify if the described feature set specifies a
                 one-, two-, or three-dimensional feature set.
            </doc>
            <enumeration>
                <item value="1"/>
                <item value="2"/>
                <item value="3"/>
            </enumeration>
        </field>
        <field name="algorithm" type="NX_CHAR">
            <doc>
                 Which algorithm is used to reconstruct the features.
            </doc>
            <enumeration>
                <item value="unknown"/>
                <item value="disorientation_clustering"/>
                <item value="fast_multiscale_clustering"/>
                <item value="markov_chain_clustering"/>
            </enumeration>
        </field>
        <field name="disorientation_threshold" type="NX_NUMBER" units="NX_ANGLE">
            <doc>
                 Threshold to define at which disorientation angle to assume
                 two crystalline regions have a significant orientation difference
                 which warrants to argue that there is an interface between the
                 two regions.
            </doc>
        </field>
    </group>
    <!--the result of running one grain reconstruction
ms_feature_set1
we could also enumerate instances ms_feature_setID here because configuration
may specify a range of different parameter resulting in multiple ms_feature_sets
dimensionality(N) composed from NXms_feature_set base:
controlled vocabulary of base class instances to be used to inform about the
discretization of these features instances to discretize the features
wherever possible the computational geometry specific instances whose
purpose is only to support/represent the discretization of the features should
be separated out from the materials engineering interpretation of what these
features are, i.e. a grain that is measured with a 2d section ends up
modelled as an projection of that real 3d grain object
the model is discretized usign a polyline which models the location of the
interface at the required here coarse-grained continuum picture-->
    <group name="points" type="NXcg_point_set"/>
    <group name="lines" type="NXcg_polyline_set"/>
    <group name="surfaces" type="NXcg_triangle_set"/>
    <group name="volumes" type="NXcg_polyhedron_set"/>
    <!--domain-specific, i.e. microstructural features
ONE DIMENSIONAL FEATURES-->
    <!--TWO DIMENSIONAL FEATURES-->
    <group name="crystal_projections" type="NXms_feature_set">
        <doc>
             Projections of crystals on the sample surface as typically
             characterized with optical or electron microscopy.
        </doc>
        <attribute name="discretization" type="NX_CHAR">
            <doc>
                 Reference to lines(NXcg_polyline_set) which supports the
                 discretized shape of each cross-sectioned crystal.
                 
                 Most microscopy techniques support to generate only a two-dimensional
                 representation (projection) of the characterized material.
                 
                 For true volumetric techniques use the specifically
                 specialized crystals :ref:`NXms_feature_set` instead.
                 See stereology literature for more details e.g.
                 E.E. Underwood's book entitled Quantitative Stereology
            </doc>
        </attribute>
        <field name="number_of_crystals" type="NX_UINT" units="NX_UNITLESS">
            <doc>
                 Number of crystals.
            </doc>
        </field>
        <field name="crystal_identifier_offset" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Integer offset whereby the identifier of the first member
                 of the set differs from zero.
                 
                 Identifiers can be defined either implicitly or explicitly.
                 For implicit indexing identifiers are defined on the interval
                 :math:`[identifier_offset, identifier_offset + c - 1]`.
            </doc>
        </field>
        <field name="crystal_identifier" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Identifier used for crystals for explicit indexing.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_c_two"/>
            </dimensions>
        </field>
        <field name="number_of_phases" type="NX_UINT" units="NX_UNITLESS">
            <doc>
                 How many phases are distinguished
            </doc>
        </field>
        <field name="phase_identifier_offset" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Integer offset whereby the identifier of the first member
                 of the set differs from zero.
            </doc>
        </field>
        <field name="phase_identifier" type="NX_INT" units="NX_UNITLESS">
            <!--
\@depends_on(NX_CHAR):
-->
            <doc>
                 Identifier used for phase for explicit indexing.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_c_two"/>
            </dimensions>
        </field>
        <!--properties of crystal_projections aka grain properties-->
        <field name="boundary_contact" type="NX_BOOLEAN">
            <doc>
                 True, if the crystal makes contact with the edge of the ROI,
                 false otherwise.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_c_two"/>
            </dimensions>
        </field>
        <field name="orientation_spread" type="NX_NUMBER" units="NX_ANGLE">
            <doc>
                 Average disorientation angle between individual orientation of the
                 crystal at probed positions (weighted by area of that position) versus
                 the average disorientation of the crystal.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_c_two"/>
            </dimensions>
        </field>
        <group type="NXrotation_set"/>
        <field name="area" type="NX_NUMBER" units="NX_AREA">
            <doc>
                 Calibrated area of surrounded by the polyline about each crystal.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_c_two"/>
            </dimensions>
        </field>
    </group>
    <group name="interface_projections" type="NXms_feature_set">
        <!--
grain boundaries have a network of line-like defects, its explicit description
often generates unnecessary information duplication and cluttering,
therefore here a compact and suggestion how to store such data
-->
        <doc>
             Projections of grain or phase boundaries as typically sectioned
             with optical or electron microscopy characterization.
        </doc>
        <attribute name="discretization" type="NX_CHAR">
            <doc>
                 Reference to lines(NXcg_polyline_set) which supports the
                 discretized shape of each cross-sectioned crystal.
                 
                 Set of tuples of polyline segments which build the interface.
            </doc>
        </attribute>
        <!--topology
i) Set of pair of crystals sharing an interface-->
        <field name="crystals" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Set of pairs of crystal_identifier resolved via depends_on which
                 are adjacent to each interface.
            </doc>
            <dimensions rank="2">
                <dim index="1" value="n_i_two"/>
                <dim index="2" value="2"/>
            </dimensions>
            <attribute name="depends_on" type="NX_CHAR">
                <doc>
                     The specific crystal_projections(NXms_feature_set) instance
                     to resolve crystal identifier.
                </doc>
            </attribute>
        </field>
        <!--ii) Set of pair of topologically connected triple points-->
        <field name="triple_points" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Set of pairs of triple_point_identifier which the interface connects.
                 For 2D projections of 3D microstructural features a triple point is
                 physically only the projection of a triple line.
            </doc>
            <dimensions rank="2">
                <dim index="1" value="n_i_two"/>
                <dim index="2" value="2"/>
            </dimensions>
            <attribute name="depends_on" type="NX_CHAR">
                <doc>
                     The specific triple_line_projections(NXms_feature_set) instance
                     whereby to resolve triple_point identifier.
                </doc>
            </attribute>
        </field>
        <!--alternatively which polyline of adjoining interfaces
properties, descriptors-->
        <field name="length" type="NX_NUMBER" units="NX_LENGTH">
            <doc>
                 The length of the interface. 
                 
                 This is not necessarily the same as the length of the individual
                 polyline segments whereby the interface is discretized.
                 
                 The actual coordinate system whereby the geometry is calibrated
                 with real physical dimensions is typically documented by the
                 depends_on attribute of the respective NXcg_primitive_set.
                 This depends_on attribute should point explicitly to an
                 instance of a :ref:`NXcoordinate_system` to support users as
                 much as possible with interpreting how and where the lines are
                 located in the reference frame.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_i_two"/>
            </dimensions>
        </field>
        <field name="interface_identifier_offset" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Integer offset whereby the identifier of the first member
                 of the set differs from zero.
                 
                 Identifiers can be defined either implicitly or explicitly.
                 For implicit indexing identifiers are defined on the interval
                 :math:`[identifier_offset, identifier_offset + c - 1]`.
            </doc>
        </field>
        <field name="interface_identifier" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Identifier for each interface using explicit indexing.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_i_two"/>
            </dimensions>
        </field>
    </group>
    <group name="triple_line_projections" type="NXms_feature_set">
        <!--
only for 2D, quad junction is the equivalent for 3D is not a triple_line
four alternative descriptors with different strength to specify spatial
or logical information about the triple junction feature set.
the explicit description often generating unnecessary information duplication
-->
        <doc>
             Projections of triple lines as typically characterized with optical
             or electron microscopy.
             
             Mind that most specimens are thermo-chemo-mechanically treated before
             they are characterized. Therefore, the projected crystal defects are
             have physically no longer the same structure as in the bulk.
             
             Examples are manifest as effects such as thermal grooving, or relaxation
             effects of an intersection between a triple line that is cut
             by the specimen surface as these defects are then exposed typically
             to a different atmosphere and hence have different thermodynamic boundary
             conditions than of their true volumetric defects in the bulk.
        </doc>
        <attribute name="discretization" type="NX_CHAR">
            <doc>
                 Reference to points(NXcg_point_set) which supports the
                 locations of these triple points.
            </doc>
        </attribute>
        <!--another view to describe a triple junction is via its topology/connection expressed either via
i) triplet of interface identifier-->
        <field name="number_of_triple_points" type="NX_UINT" units="NX_UNITLESS">
            <doc>
                 Number of triple points.
            </doc>
        </field>
        <field name="triple_point_identifier_offset" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Integer offset whereby the identifier of the first member
                 of the set differs from zero.
                 
                 Identifiers can be defined either implicitly or explicitly.
                 For implicit indexing identifiers are defined on the interval
                 :math:`[identifier_offset, identifier_offset + c - 1]`.
            </doc>
        </field>
        <field name="triple_point_identifier" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Identifier for each triple point using explicit indexing.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_t_two"/>
            </dimensions>
        </field>
        <field name="location" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Set of triple point identifiers.
            </doc>
            <dimensions rank="1">
                <dim index="1" value="n_t_two"/>
            </dimensions>
            <attribute name="depends_on" type="NX_CHAR">
                <doc>
                     The relevant points(NXcg_point_set) instance whereby to
                     resolve interface identifiers.
                </doc>
            </attribute>
        </field>
        <field name="interfaces" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Set of triplets of identifier of line-like features.
                 Each triplet resolves which three interface projections
                 the triple point connects.
            </doc>
            <dimensions rank="2">
                <dim index="1" value="n_t_two"/>
                <dim index="2" value="3"/>
            </dimensions>
            <attribute name="depends_on" type="NX_CHAR">
                <doc>
                     The specific interface_projections(NXms_feature_set)
                     instance whereby to resolve interface identifiers.
                </doc>
            </attribute>
        </field>
        <!--ii) a triplet of line segment identifier whereby the point-like features
is assumed discretized via three polylines representing interfaces-->
        <field name="polylines" type="NX_INT" units="NX_UNITLESS">
            <doc>
                 Triplet of identifier of polyline segments. Each triplet resolves
                 which three segments of polyline segments the triple junction connects.
            </doc>
            <dimensions rank="2">
                <dim index="1" value="n_t_two"/>
                <dim index="2" value="3"/>
            </dimensions>
            <attribute name="depends_on" type="NX_CHAR">
                <doc>
                     The specific lines(NXcg_polyline_set) instance to resolve
                     polyline segments.
                </doc>
            </attribute>
        </field>
    </group>
    <!--the difference in the interpretation of interfaces and polylines
is that the interface resolves interface (e.g. phase boundary names)
while polylines resolves segments within the set of named geometric primitive
instances!
add all sort of other qualitative or quantitive descriptors (triple junction
energy, volume etc), i.e properties of that triple point-->
</definition>
