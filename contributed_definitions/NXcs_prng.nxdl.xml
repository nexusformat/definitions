<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
# 
# Copyright (C) 2014-2022 NeXus International Advisory Committee (NIAC)
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" name="NXcs_prng" extends="NXobject" type="group" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
             The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
    </symbols>
    <doc>
         Computer science description of pseudo-random number generator.
         
         The purpose of such metadata is to identify if exactly the same sequence
         can be reproduced, like for a PRNG or not (for a true physically random source).
    </doc>
    <field name="type">
        <doc>
             Different approaches for generating random numbers with a computer exists.
             Some use a dedicated physical device where the state is unpredictable (physically).
             Some use a mangling of the system clock (system_clock), where also without
             additional pieces of information the sequence is not reproducible.
             Some use so-called pseudo-random number generator (PRNG) are used.
             These are algorithms which yield a deterministic sequence of practically
             randomly appearing numbers. These algorithms different in their quality in
             how close the resulting sequences are random.
             Nowadays one of the most commonly used algorithm is
             the MersenneTwister (mt19937).
        </doc>
        <enumeration>
            <item value="physical"/>
            <item value="system_clock"/>
            <item value="mt19937"/>
            <item value="other"/>
        </enumeration>
    </field>
    <field name="program">
        <doc>
             Name of the PRNG implementation and version. If such information is not
             available or if the PRNG type was set to other the DOI to the publication
             or the source code should be given.
        </doc>
        <attribute name="version">
            <doc>
                 Version and build number, or commit hash.
            </doc>
        </attribute>
    </field>
    <field name="seed" type="NX_NUMBER" units="NX_UNITLESS">
        <doc>
             Parameter of the PRNG controlling its initialization and thus the specific
             sequence of numbers it generates.
        </doc>
    </field>
    <!--reformulate last part of the first sentence.-->
    <field name="warmup" type="NX_NUMBER" units="NX_UNITLESS">
        <doc>
             Number of initial draws from the PRNG which are discarded in an effort
             to equilibrate the sequence and make it thus to statistically more random.
             If no warmup was performed or if warmup procedures are unclear,
             users should set the value to zero.
        </doc>
    </field>
    <!--one could add spectral properties but this is usually well documented in the PRNG literature
one could also think about making reference to the NIST PRNG test suite to qualify the PRNG-->
</definition>
