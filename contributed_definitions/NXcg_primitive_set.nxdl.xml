<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2014-2024 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" type="group" name="NXcg_primitive_set" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <!--this base class defines common fields and properties of geometric primitives
more complex primitive sets like NXcg_cylinder_set are considered specializations
of NXcg_primitive_set. They contain all fields and groups which NXcg_primitive_set
defines. This is an action of compositing an information set; an act of inheriting
TODO:: many properties of non-degenerate primitives are in the number set
R+ instead of in R+0 but currently NeXus does not allow for such value range
constraints unless the coarsely discretized NX_INT, NX_POSINT, NX_FLOAT
but there is no say NX_FLOAT+0
MK::but in computational geometry numerical precision matters as it defines
whether objects numerically intersect or not and thus it can make a real difference
if one stores triangles with 16, 32, or 64 bit precision, however:
are two triangle_set instance A and B no longer conceptually triangle sets
because A stores the positions of vertices using int8 while B stores such using float64 ?
we here assume that we still conceptually talk that A and B are triangle sets
but this brings at the level of the application definition the problem that if the
precision is not properly constrainted a consuming application will not obtain
the instances of the concept triangle_set with relevant high enough precision
and thus neither the base class nor the application definition is specific enough
for what it was designed in the first place - be specific about the requirements
on your data...-->
    <symbols>
        <doc>
             The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
        <symbol name="d">
            <doc>
                 The dimensionality of the space.
            </doc>
        </symbol>
        <symbol name="c">
            <doc>
                 The cardinality of the set, i.e. the number of members.
            </doc>
        </symbol>
    </symbols>
    <doc>
         Computational geometry description of a set of primitives in Euclidean space.
         
         Primitives must neither be degenerated nor self-intersect.
         Individual primitives can differ in their properties (e.g. size, shape, rotation).
    </doc>
    <!--individual specializations like NXcg_polyline_set typically overwrite
the meaning of the depends_on concept to build consistent inference chains
to enable an instantiation of the actual geometric primitives-->
    <attribute name="depends_on" type="NX_CHAR">
        <doc>
             Hint to help resolve in which Euclidean coordinate system field values
             like center or orientation are defined.
        </doc>
    </attribute>
    <field name="dimensionality" type="NX_POSINT" units="NX_UNITLESS">
        <doc>
             The dimensionality of the primitive set.
        </doc>
        <enumeration>
            <item value="1"/>
            <item value="2"/>
            <item value="3"/>
        </enumeration>
    </field>
    <field name="cardinality" type="NX_POSINT" units="NX_UNITLESS">
        <doc>
             The cardinality of the primitive set.
        </doc>
    </field>
    <field name="identifier_offset" type="NX_INT" units="NX_UNITLESS">
        <doc>
             Integer offset whereby the identifier of the first member
             of the set differs from zero.
             
             Identifiers can be defined either implicitly or explicitly.
             For implicit indexing identifiers are defined on the interval
             :math:`[identifier_offset, identifier_offset + c - 1]`.
             
             Therefore, implicit identifier are completely defined by the value of
             identifier_offset and cardinality. For example if identifier run from
             -2 to 3 the value for identifier_offset is -2.
             
             For explicit indexing the field identifier has to be used.
             Fortran-/Matlab- and C-/Python-style indexing have specific implicit
             identifier conventions where identifier_offset is 1 and 0 respectively.
        </doc>
    </field>
    <field name="identifier" type="NX_INT">
        <doc>
             Identifier of each member for explicit indexing.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="center" type="NX_NUMBER" units="NX_ANY">
        <doc>
             The center of mass position of each primitive.
        </doc>
        <dimensions rank="2">
            <dim index="1" value="c"/>
            <dim index="2" value="d"/>
        </dimensions>
    </field>
    <!--a depends_on to define in which coordinate system-->
    <field name="is_center_of_mass" type="NX_BOOLEAN">
        <doc>
             True if the center is a center of mass.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="shape" type="NX_NUMBER" units="NX_LENGTH">
        <doc>
             A qualitative description of the shape of each primitive.
        </doc>
        <dimensions rank="2">
            <dim index="1" value="c"/>
            <dim index="2" value="d"/>
        </dimensions>
    </field>
    <field name="length" type="NX_NUMBER" units="NX_LENGTH">
        <doc>
             Qualifier for the length of characteristic features of the primitive.
             
             Often the term length is associated with the assumption that one
             edge is parallel to an axis of the coordinate system.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="width" type="NX_NUMBER" units="NX_LENGTH">
        <doc>
             Qualifier often used to describe the length of one characteristic edge
             within the coordinate system.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="is_closed" type="NX_BOOLEAN">
        <doc>
             True if primitive is closed such that it has properties like area or volume.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="volume" type="NX_NUMBER" units="NX_VOLUME">
        <doc>
             Volume of each primitive.
             
             Set to NaN if does not apply for primitives for which is_closed is False.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="area" type="NX_NUMBER" units="NX_AREA">
        <doc>
             Alias for surface_area of each primitive.
             
             Set to NaN if does not apply for primitives for which is_closed is False.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="c"/>
        </dimensions>
    </field>
    <field name="orientation" type="NX_NUMBER" units="NX_DIMENSIONLESS">
        <doc>
             Direction unit vector which points along the
             longest principal axis of each primitive.
             
             Use the depends_on attribute to specify in which coordinate system
             these direction unit vectors are defined.
        </doc>
        <dimensions rank="2">
            <dim index="1" value="c"/>
            <dim index="2" value="d"/>
        </dimensions>
    </field>
    <group name="vertex_normal" type="NXcg_unit_normal_set"/>
    <group name="edge_normal" type="NXcg_unit_normal_set"/>
    <group name="face_normal" type="NXcg_unit_normal_set"/>
    <!--roi(NXcg_parallelogram_set or NXcg_hexahedron_set)
aabb(NXcg_parallelogram_set or NXcg_hexahedron_set)
obb(NXcg_parallelogram_set or NXcg_hexahedron_set)
MK::one could add (NXcg_parallelogram_set) and/or (NXcg_hexahedron_set)
but then one would not give any hint at the base class level how to name-->
</definition>
