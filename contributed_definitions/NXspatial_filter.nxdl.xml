<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2022-2025 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<!--
n_vertices: Number of vertices for polyhedra.
n_facets: Number of facets for polyhedra.-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" type="group" name="NXspatial_filter" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
            The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
        <symbol name="n_hexahedra">
            <doc>
                Number of hexahedra.
            </doc>
        </symbol>
        <symbol name="n_cylinders">
            <doc>
                Number of cylinders.
            </doc>
        </symbol>
        <symbol name="n_ellipsoids">
            <doc>
                Number of ellipsoids.
            </doc>
        </symbol>
        <symbol name="n_polyhedra">
            <doc>
                Number of polyhedra.
            </doc>
        </symbol>
    </symbols>
    <doc>
        Base class for a spatial filter for objects within a region-of-interest (ROI).
        
        Objects can be points or objects composed from other geometric primitives.
    </doc>
    <field name="windowing_method" type="NX_CHAR">
        <doc>
            Qualitative statement which describes the logical operations
            that define which objects will be included and which excluded:
            
            * entire_dataset, no filter is applied, all objects are included.
            * union_of_primitives, a filter with (possibly non-axis-aligned) geometric
              primitives. Objects in or on the surface of the primitives are included.
              All other objects are excluded.
            * bitmask, a boolean array whose bits encode with 1 which objects
              are included. Bits set to zero encode which objects are excluded.
              Users of python can use the bitfield operations
              of the numpy package to work with bitfields.
        </doc>
        <!--In the case that windowing_method is union_of_primitives,
it is possible to specify none or all types of primitives
(ellipsoids, cylinder, hexahedra). If no primitives are specified
the filter falls back to entire_dataset.
In the case that windowing_method is bitmask, the bitmask has to be defined;
otherwise the filter falls back to entire dataset.-->
        <enumeration>
            <item value="entire_dataset"/>
            <item value="union_of_primitives"/>
            <item value="bitmask"/>
        </enumeration>
    </field>
    <group type="NXcg_hexahedron"/>
    <group type="NXcg_cylinder"/>
    <group type="NXcg_ellipsoid"/>
    <group type="NXcg_polyhedron"/>
    <group type="NXcs_filter_boolean_mask"/>
</definition>
