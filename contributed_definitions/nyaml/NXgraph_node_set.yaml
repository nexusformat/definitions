category: base
doc: |
  A set of nodes/vertices in space representing members of a graph.
# a graph in which space d-dimensional, categorical, at all a metric one?
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  d: The dimensionality of the graph. Eventually use one for categorical.
  c: The cardinality of the set, i.e. the number of nodes/vertices of the graph.
NXgraph_node_set:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
  cardinality(NX_POSINT):
    unit: NX_UNITLESS
  identifier_offset(NX_INT):
    doc: |
      Integer which specifies the first index to be used for distinguishing
      nodes. Identifiers are defined either implicitly
      or explicitly. For implicit indexing the identifiers are defined on the
      interval [identifier_offset, identifier_offset+c-1].
      For explicit indexing the identifier array has to be defined.
      
      The identifier_offset field can for example be used to communicate if the
      identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
      or from 0 (referred to as C-, Python-style index notation) respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: Integer used to distinguish nodes for explicit indexing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  is_a(NX_CHAR):
    doc: |
      A human-readable qualifier which type or e.g. class instance the
      node is an instance of. As e.g. a NeXus application definition is a
      graph, more specifically a hierarchical directed labelled property graph,
      instances which are groups like NXgraph_node_set could have an is_a
      qualifier reading NXgraph_node_set.
    dimensions:
      rank: 1
      dim: [[1, c]]
  label(NX_CHAR):
    doc: A human-readable label/caption/tag of the graph.
    dimensions:
      rank: 1
      dim: [[1, c]]
# how to handle arrays which are compressed? This can be useful for instance
# if there are substantially fewer disjoint labels than c