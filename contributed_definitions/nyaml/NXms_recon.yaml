# position would need another depends_on the specific coordinate system used, currently we assume McStas
# roi1/ebsd/microstructure1
category: base
doc: |
  Base class to describe discretized (micro)structural features of a material.
  
  One instance of this base class can be used to describe the current configuration
  the base class does not include time-dependent descriptions for the sake of
  clarity and because of the fact that virtually all simulations or experiments
  probe time by sampling. Therefore, time-dependent state descriptions should
  be realized with creating a set of :ref:`NXms_snapshot_set` with instances of
  :ref:`NXms_snapshot` using e.g. :ref:`NXms_recon` base class instances.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  # in so-called linear intercept analysis we observe
  # one-dimensional sections of either projections (see below)
  # or true one-dimensional cuts across a volume of material
  # n_icept: |
  #   The number of linear intercepts defined.
  # n_c_one: |
  #   The number of crystal projections segmented by crossing (projected or real) interfaces
  # n_i_one: |
  #   The number of crossings
  # two-dimensional projections of characterized in reality three-dimensional objects
  # using E. E. Underwood notation
  # crystals/grains are projections that are delineated by projections of interface, i.e. interface lines which meet at projections of triple lines i.e. triple "points"
  n_c_two: |
    The number of crystal projections.
  n_i_two: |
    The number of interface projections.
  n_t_two: |  
    The number of assumed triple junction projections aka triple points.
  # three-dimensional real objects, volumetrically characterized
  # crystals are delineated by interfaces that are delineated by triple lines that meet at quad junctions
  n_c: |
    The number of crystals.
  n_i: |
    The number of interfaces
  n_t: |
    The number of triple lines
  n_q: |
    The number of quadruple junctions.
type: group
NXms_recon(NXobject):
  # as e.g. a result of one grain reconstruction with MTex or othe
  # grain reconstruction software in commercial tools
  # the idea is we may wish to run as many grain reconstructions as we want...
  # add details about the processing
  configuration(NXprocess):
    doc: |
      The configuration and parameterization of the reconstruction algorithm
      whereby the microstructural features were identified.
    # maybe a depends_on what was the input however if the group is injected
    # in an roi1/ebsd instance isnt this information implicit?
    dimensionality(NX_POSINT):
      doc: |
        Dimensionality of the analysis.
        
        This field can be used e.g. by a research data management system
        to identify if the described feature set specifies a
        one-, two-, or three-dimensional feature set.
      unit: NX_UNITLESS
      enumeration: [1, 2, 3]
    algorithm(NX_CHAR):
      doc: |
        Which algorithm is used to reconstruct the features.
      enumeration: [unknown, disorientation_clustering, fast_multiscale_clustering, markov_chain_clustering]
    disorientation_threshold(NX_NUMBER):
      doc: |
        Threshold to define at which disorientation angle to assume
        two crystalline regions have a significant orientation difference
        which warrants to argue that there is an interface between the
        two regions.
      unit: NX_ANGLE
  # the result of running one grain reconstruction
  # ms_feature_set1
  # we could also enumerate instances ms_feature_setID here because configuration
  # may specify a range of different parameter resulting in multiple ms_feature_sets
  # dimensionality(N) composed from NXms_feature_set base:
  # controlled vocabulary of base class instances to be used to inform about the
  # discretization of these features instances to discretize the features
  # wherever possible the computational geometry specific instances whose
  # purpose is only to support/represent the discretization of the features should
  # be separated out from the materials engineering interpretation of what these
  # features are, i.e. a grain that is measured with a 2d section ends up
  # modelled as an projection of that real 3d grain object
  # the model is discretized usign a polyline which models the location of the
  # interface at the required here coarse-grained continuum picture
  points(NXcg_point_set):
  lines(NXcg_polyline_set):
  surfaces(NXcg_triangle_set):
  volumes(NXcg_polyhedron_set):

  # domain-specific, i.e. microstructural features
  # ONE DIMENSIONAL FEATURES

  # TWO DIMENSIONAL FEATURES
  crystal_projections(NXms_feature_set):
    doc: |
      Projections of crystals on the sample surface as typically
      characterized with optical or electron microscopy.
    \@discretization(NX_CHAR):
      doc: |
        Reference to lines(NXcg_polyline_set) which supports the
        discretized shape of each cross-sectioned crystal.
        
        Most microscopy techniques support to generate only a two-dimensional
        representation (projection) of the characterized material.
        
        For true volumetric techniques use the specifically
        specialized crystals :ref:`NXms_feature_set` instead.
        See stereology literature for more details e.g.
        E.E. Underwood's book entitled Quantitative Stereology
    number_of_crystals(NX_UINT):
      doc: |
        Number of crystals.
      unit: NX_UNITLESS
    crystal_identifier_offset(NX_INT):
      doc: |
        Integer offset whereby the identifier of the first member
        of the set differs from zero.
        
        Identifiers can be defined either implicitly or explicitly.
        For implicit indexing identifiers are defined on the interval
        :math:`[identifier\_offset, identifier\_offset + c - 1]`.
      unit: NX_UNITLESS
    crystal_identifier(NX_INT):
      doc: |
        Identifier used for crystals for explicit indexing.
      unit: NX_UNITLESS
      dim: (n_c_two,)
    number_of_phases(NX_UINT):
      doc: |
        How many phases are distinguished
      unit: NX_UNITLESS
    phase_identifier_offset(NX_INT):
      doc: |
        Integer offset whereby the identifier of the first member
        of the set differs from zero.
      unit: NX_UNITLESS
    phase_identifier(NX_INT):
      # \@depends_on(NX_CHAR):
      doc: |
        Identifier used for phase for explicit indexing.
      unit: NX_UNITLESS
      dim: (n_c_two,)
    # properties of crystal_projections aka grain properties
    boundary_contact(NX_BOOLEAN):
      doc: |
        True, if the crystal makes contact with the edge of the ROI,
        false otherwise.
      dim: (n_c_two,)
    orientation_spread(NX_NUMBER):
      doc: |
        Average disorientation angle between individual orientation of the
        crystal at probed positions (weighted by area of that position) versus
        the average disorientation of the crystal.
      unit: NX_ANGLE
      dim: (n_c_two,)
    (NXrotation_set):
    area(NX_NUMBER):
      doc: |
        Calibrated area of surrounded by the polyline about each crystal.
      unit: NX_AREA
      dim: (n_c_two,)
  interface_projections(NXms_feature_set):
    # grain boundaries have a network of line-like defects, its explicit description
    # often generates unnecessary information duplication and cluttering,
    # therefore here a compact and suggestion how to store such data
    doc: |
      Projections of grain or phase boundaries as typically sectioned
      with optical or electron microscopy characterization.
    \@discretization(NX_CHAR):
      doc: |
        Reference to lines(NXcg_polyline_set) which supports the
        discretized shape of each cross-sectioned crystal.
        
        Set of tuples of polyline segments which build the interface.
    # topology
    # i) Set of pair of crystals sharing an interface
    crystals(NX_INT):
      doc: |
        Set of pairs of crystal_identifier resolved via depends_on which
        are adjacent to each interface.
      unit: NX_UNITLESS
      dim: (n_i_two, 2)
      \@depends_on(NX_CHAR):
        doc: |
          The specific crystal_projections(NXms_feature_set) instance
          to resolve crystal identifier.
    # ii) Set of pair of topologically connected triple points
    triple_points(NX_INT):
      doc: |
        Set of pairs of triple_point_identifier which the interface connects.
        For 2D projections of 3D microstructural features a triple point is
        physically only the projection of a triple line.
      unit: NX_UNITLESS
      dim: (n_i_two, 2)
      \@depends_on(NX_CHAR):
        doc: |
          The specific triple_line_projections(NXms_feature_set) instance
          whereby to resolve triple_point identifier.
    # alternatively which polyline of adjoining interfaces 
    # properties, descriptors
    length(NX_NUMBER):
      doc: |
        The length of the interface. 
        
        This is not necessarily the same as the length of the individual
        polyline segments whereby the interface is discretized.
        
        The actual coordinate system whereby the geometry is calibrated
        with real physical dimensions is typically documented by the
        depends_on attribute of the respective NXcg_primitive_set.
        This depends_on attribute should point explicitly to an
        instance of a :ref:`NXcoordinate_system` to support users as
        much as possible with interpreting how and where the lines are
        located in the reference frame.
      unit: NX_LENGTH
      dim: (n_i_two,)
    interface_identifier_offset(NX_INT):
      doc: |
        Integer offset whereby the identifier of the first member
        of the set differs from zero.
        
        Identifiers can be defined either implicitly or explicitly.
        For implicit indexing identifiers are defined on the interval
        :math:`[identifier\_offset, identifier\_offset + c - 1]`.
      unit: NX_UNITLESS
    interface_identifier(NX_INT):
      doc: |
        Identifier for each interface using explicit indexing.
      unit: NX_UNITLESS
      dim: (n_i_two,)
  triple_line_projections(NXms_feature_set):
    # only for 2D, quad junction is the equivalent for 3D is not a triple_line
    # four alternative descriptors with different strength to specify spatial
    # or logical information about the triple junction feature set.
    # the explicit description often generating unnecessary information duplication
    doc: |
      Projections of triple lines as typically characterized with optical
      or electron microscopy.
      
      Mind that most specimens are thermo-chemo-mechanically treated before
      they are characterized. Therefore, the projected crystal defects are
      have physically no longer the same structure as in the bulk.
      
      Examples are manifest as effects such as thermal grooving, or relaxation
      effects of an intersection between a triple line that is cut
      by the specimen surface as these defects are then exposed typically
      to a different atmosphere and hence have different thermodynamic boundary
      conditions than of their true volumetric defects in the bulk.
    \@discretization(NX_CHAR):
      doc: |
        Reference to points(NXcg_point_set) which supports the
        locations of these triple points.
    # another view to describe a triple junction is via its topology/connection expressed either via
    # i) triplet of interface identifier
    number_of_triple_points(NX_UINT):
      doc: |
        Number of triple points.
      unit: NX_UNITLESS
    triple_point_identifier_offset(NX_INT):
      doc: |
        Integer offset whereby the identifier of the first member
        of the set differs from zero.
        
        Identifiers can be defined either implicitly or explicitly.
        For implicit indexing identifiers are defined on the interval
        :math:`[identifier\_offset, identifier\_offset + c - 1]`.
      unit: NX_UNITLESS
    triple_point_identifier(NX_INT):
      doc: |
        Identifier for each triple point using explicit indexing.
      unit: NX_UNITLESS
      dim: (n_t_two,)
    location(NX_INT):
      doc: |
        Set of triple point identifiers.
      unit: NX_UNITLESS
      dim: (n_t_two,)
      \@depends_on(NX_CHAR):
        doc: |
          The relevant points(NXcg_point_set) instance whereby to
          resolve interface identifiers.
    interfaces(NX_INT): # aka topology or interfaces
      doc: |
        Set of triplets of identifier of line-like features.
        Each triplet resolves which three interface projections
        the triple point connects.
      unit: NX_UNITLESS
      dim: (n_t_two, 3)
      \@depends_on(NX_CHAR):
        doc: |
          The specific interface_projections(NXms_feature_set)
          instance whereby to resolve interface identifiers.
    # ii) a triplet of line segment identifier whereby the point-like features
    # is assumed discretized via three polylines representing interfaces
    polylines(NX_INT):
      doc: |
        Triplet of identifier of polyline segments. Each triplet resolves
        which three segments of polyline segments the triple junction connects.
      unit: NX_UNITLESS
      dim: (n_t_two, 3)
      \@depends_on(NX_CHAR):
        doc: |
          The specific lines(NXcg_polyline_set) instance to resolve
          polyline segments.
    # the difference in the interpretation of interfaces and polylines
    # is that the interface resolves interface (e.g. phase boundary names)
    # while polylines resolves segments within the set of named geometric primitive
    # instances!
    # add all sort of other qualitative or quantitive descriptors (triple junction
    # energy, volume etc), i.e properties of that triple point
