category: base
doc: |
  Computational geometry description of a set of parallelograms in Euclidean space.
  
  The parallelograms do not have to be connected, can have different size,
  can intersect, and be rotated.
  This class can also be used to describe rectangles or squares, axis-aligned or not.
  The class represents different access and description levels to offer both
  applied scientists and computational geometry experts to use the same
  base class but rather their specific view on the data:
  
  * Most simple many experimentalists wish to communicate dimensions/the size
    of e.g. a region of interest in the 2D plane. In this case the alignment
    with axes is not relevant as eventually relevant is only the area of the ROI.
  * In other cases the extent of the parallelogram is relevant though.
  * Finally in CAD models we would like to specify the polygon
    which is parallelogram represents.
  
  Parallelograms are important geometrical primitives. Not so much because of their
  uses in nowadays, thanks to improvements in computing power, not so frequently
  any longer performed 2D simulation. Many scanning experiments probe though
  parallelogram-shaped ROIs on the surface of samples.
  
  Parallelograms have to be non-degenerated, closed, and built of polygons
  which are not self-intersecting.
  
  The term parallelogram will be used throughout this base class but includes
  the especially in engineering and more commonly used special cases,
  rectangle, square, 2D box, axis-aligned bounding box (AABB), or
  optimal bounding box (OBB) but here the analogous 2D cases.
  
  An axis-aligned bounding box is a common data object in computational science
  and codes to represent a rectangle whose edges are aligned with the axes 
  of a coordinate system. As a part of binary trees these are important data
  objects for time- as well as space-efficient queries
  of geometric primitives in techniques like kd-trees.
  
  An optimal bounding box is a common data object which provides the best
  tight fitting box about an arbitrary object. In general such boxes are
  rotated. Other than in 3D dimensions the rotation calipher method offers
  a rigorous approach to compute optimal bounding boxes in 2D.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  c: The cardinality of the set, i.e. the number of parallelograms.
NXcg_parallelogram_set:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
    enumeration: [2]
  cardinality(NX_POSINT):
    unit: NX_UNITLESS
  # qualifiers and properties of parallelograms
  shape(NX_NUMBER):
    doc: A qualitative description of each parallelogram/rectangle/square/box.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, c], [2, 2]]
  length(NX_NUMBER):
    doc: |
      Qualifier how one edge is longer than all the other edge of the parallelogam.
      Often the term length is associated with one edge being parallel to
      an axis of the coordinate system.
    unit: NX_LENGTH
    dimensions:
      rank: 1
      dim: [[1, c]]
  width(NX_NUMBER):
    doc: |
      Qualifier often used to describe the length of an edge within
      a specific coordinate system.
    unit: NX_LENGTH
    dimensions:
      rank: 1
      dim: [[1, c]]
  center(NX_NUMBER):
    doc: |
      Position of the geometric center, which often is but not necessarily
      has to be the center_of_mass of the parallelogram.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, c], [2, 2]]
  surface_area(NX_NUMBER):
    unit: NX_AREA
    dimensions:
      rank: 1
      dim: [[1, c]]
  is_axis_aligned(NX_BOOLEAN):
    doc: |
      Only to be used if is_box is present. In this case, this field describes
      whether parallelograms are rectangles/squares whose primary edges
      are parallel to the axes of the Cartesian coordinate system.
    dimensions:
      rank: 1
      dim: [[1, c]]
  (NXtransformations):
    doc: |
      Reference to or definition of a coordinate system with
      which the qualifiers and mesh data are interpretable.
  identifier_offset(NX_INT):
    doc: |
      Integer which specifies the first index to be used for distinguishing
      parallelograms. Identifiers are defined either implicitly
      or explicitly. For implicit indexing the identifiers are defined on the
      interval [identifier_offset, identifier_offset+c-1].
      For explicit indexing the identifier array has to be defined.
      
      The identifier_offset field can for example be used to communicate if the
      identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
      or from 0 (referred to as C-, Python-style index notation) respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: Integer used to distinguish parallelograms for explicit indexing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  # substantially more detailed descriptors of the shape, the mesh
  orientation(NXorientation_set):
  vertex_normal(NXcg_unit_normal_set):
  edge_normal(NXcg_unit_normal_set):
  face_normal(NXcg_unit_normal_set):
  # detailed mesh-based representation
  parallelograms(NXcg_face_list_data_structure):
    # exists: [min, 0, max, 1]
    doc: |
      A simple approach to describe the entire set of parallelograms when the
      main intention is to store the shape of the parallelograms for visualization.
  parallelogram(NXcg_face_list_data_structure):
    # exists: [min, 0, max, infty]  # can this be max, c?
    doc: Disentangled representations of the mesh of specific parallelograms.
  # ##MK::a half-edge structure would be overkill as this is a simple primitive
