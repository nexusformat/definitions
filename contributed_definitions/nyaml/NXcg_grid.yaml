category: base
doc: |
  Computational geometry description of a Wigner-Seitz cell grid in Euclidean space.
  
  Frequently convenient three-dimensional grids with cubic cells are used.
  Exemplar applications are spectral-solver based crystal plasticity
  and stencil methods like phase-field or cellular automata.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  d: The dimensionality of the grid.
  c: The cardinality or total number of cells/grid points.
  n_b: Number of boundaries of the bounding box or primitive to the grid.
NXcg_grid:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
    enumeration: [1, 2, 3]
  cardinality(NX_POSINT):
    unit: NX_UNITLESS
  origin(NX_NUMBER):
    dimensions:
      rank: 1
      dim: [[1, d]]
  symmetry:
    doc: The symmetry of the lattice defining the shape of the unit cell.
    enumeration: [cubic]
  cell_dimensions(NX_NUMBER):
    doc: The unit cell dimensions using crystallographic notation.
    unit: NX_LENGTH
    dimensions:
      rank: 1
      dim: [[1, d]]
  extent(NX_POSINT):
    doc: |
      Number of unit cells along each of the d unit vectors.
      The total number of cells, or grid points has to be the cardinality.
      If the grid has an irregular number of grid positions in each direction,
      as it could be for instance the case of a grid where all grid points
      outside some masking primitive are removed, this extent field should
      not be used. Instead use the coordinate field.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, d]]
  (NXtransformations):
    doc: |
      Reference to or definition of a coordinate system with
      which the positions and directions are interpretable.
  # number_of_cells(NX_UINT): maybe already too trivial quantities
  # should constraints on the grid be place here or not
  identifier_offset(NX_INT):
    doc: |
      Integer which specifies the first index to be used for distinguishing
      identifiers for cells. Identifiers are defined either implicitly
      or explicitly. For implicit indexing the identifiers are defined on the
      interval [identifier_offset, identifier_offset+c-1].
      For explicit indexing the identifier array has to be defined.
      
      The identifier_offset field can for example be used to communicate if the
      identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
      or from 0 (referred to as C-, Python-style index notation) respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: Integer used to distinguish cells for explicit indexing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  position(NX_NUMBER):
    doc: Position of each cell in Euclidean space.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, c], [2, d]]
  coordinate(NX_INT):
    doc: Coordinate of each cell with respect to the discrete grid.
    unit: NX_DIMENSIONLESS
    dimensions:
      rank: 2
      dim: [[1, c], [2, d]]
  # this should be a ROI
  bounding_box(NXcg_polyhedron_set):
    doc: A tight bounding box or sphere or bounding primitive about the grid.
  # a good example for a general bounding box description for such a grids of triclinic cells
  # https://docs.lammps.org/Howto_triclinic.html NXcg_polyhedron because a parallelepiped
  number_of_boundaries(NX_POSINT):
    doc: |
      How many distinct boundaries are distinguished?
      Most grids discretize a cubic or cuboidal region. In this case
      six sides can be distinguished, each making an own boundary.
    unit: NX_UNITLESS
  boundaries(NX_CHAR):
    doc: |
      Name of the boundaries. E.g. left, right, front, back, bottom, top,
      The field must have as many entries as there are number_of_boundaries.
  boundary_conditions(NX_INT):
    doc: |
      The boundary conditions for each boundary:
      
      0 - undefined
      1 - open
      2 - periodic
      3 - mirror
      4 - von Neumann
      5 - Dirichlet
      
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_b]]
