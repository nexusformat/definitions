category: base
doc: |
  Base class specialized for reporting a cuboidal stack of diffraction pattern.
  
  Diffraction pattern, whether they were simulated or measured are the raw data
  for computational workflows to characterize the phase and orientation
  of crystalline regions in matter.
  
  Steps of post-processing the diffraction patterns should be documented using
  method-specific specialized base classes. All eventual post-processing of
  resulting orientation maps (2D or 3D) should be documented via :ref:`NXms_recon`.
  
  To implement an example how this base class can be used we focused in FAIRmat
  on Kikuchi diffraction pattern here specifically the research community
  of Electron Backscatter Diffraction (EBSD).
  
  For this reason, this base class and related :ref:`NXem_base` classes extend the
  work of `M. A. Jackson et al. <https://doi.org/10.1186/2193-9772-3-4>`_
  (one of the developers of DREAM.3D) and the H5OINA public file format developed by
  `P. Pinard et al. <https://doi.org/10.1017/S1431927621006103>`_ with Oxford Instruments.
  
  Kikuchi pattern are typically collected with FIB/SEM microscopes,
  for two- and three-dimensional orientation microscopy.
  
  For a detailed overview of these techniques see e.g.
  
  * `M. A. Groeber et al. <https://doi.org/10.1186/2193-9772-3-5>`_
  * `A. J. Schwartz et al. <https://doi.org/10.1007/978-1-4757-3205-4>`_
  * `P. A. Rottman et al. <https://doi.org/10.1016/j.mattod.2021.05.003>`_
  
  Serial-sectioning demands a recurrent sequence of ion milling and measuring.
  This suggests that each serial section is at least an own NXevent_data_em
  instance. The three-dimensional characterization as such demands a computational
  step where the maps for each serial section get cleaned, aligned, and registered
  into an image stack. This image stack represents a digital model of the
  inspected microstructural volume. Often this volume is called a (representative)
  volume element (RVE). Several software packages exists for performing
  these post-processing tasks.
  
  This example may inspire users of other types of diffraction methods.
symbols:
  n_sc: |
    Number of scanned points. Scan point may have none, one, or more pattern.
  n_p: |
    Number of diffraction pattern.
  n_y: |
    Number of pixel per pattern in the slow direction.
  n_x: |
    Number of pixel per pattern in the fast direction.
type: group
NXimage_r_set_diff(NXimage_r_set):
  pattern_type(NX_CHAR):
    doc: |
      Category which type of diffraction pattern is reported.
    enumeration: [kikuchi]
  stack(NXdata):
    doc: |
      Collected diffraction pattern as an image stack. As raw and closest to the
      first retrievable measured data as possible, i.e. do not use this
      container to store already averaged, filtered or whatever post-processed
      pattern unless these are generated unmodifiably in such manner by the
      instrument given the way how the instrument and control software
      was configured for your microscope session.
    scan_point_identifier(NX_INT):
      doc: |
        Array which resolves the scan point to which each pattern belongs.
        
        Scan points are evaluated in sequence starting from scan point zero
        until scan point n_sc - 1. Evaluating the cumulated of this array
        decodes which pattern in intensity belongs to which scan point.
        
        Take an example with three scan points: The first scan point has one
        pattern, the second has three pattern, the last scan point has no
        pattern. In this case the scan_point_identifier are 0, 1, 1, 1.
        The length of the scan_point_identifier array is four because four
        pattern were measured in total.
        
        In most cases usually one pattern is averaged by the detector for
        some amount of time and then reported as one pattern.
      unit: NX_UNITLESS
      dim: (n_p,)
    intensity(NX_NUMBER):
      doc: |
        Intensity of the diffraction pattern.
      unit: NX_UNITLESS
      dim: (n_p, n_y, n_x)
      # n_p fast 2, n_y faster 1, n_x fastest 0
      # in axes fast to fastest
      # while for _indices fastest to fast
      \@long_name(NX_CHAR):
        doc: |
          Pattern intensity
    # \@signal: intensity
    # \@axes: [pattern_identifier, ypos, xpos]
    # \@xpos_indices: 0
    # \@ypos_indices: 1
    # \@pattern_identifier_indices: 2
    pattern_identifier(NX_INT):
      doc: |
        Pattern are enumerated starting from 0 to n_p - 1.
      unit: NX_UNITLESS
      dim: (n_p,)
      \@long_name(NX_CHAR):
        doc: |
          Pattern identifier
    # the following fields are taken from the NXimage_r_set base class
    # axis_y(R):
    # axis_x(R):

#  If we envision a (knowledge) graph for EBSD it consists of individual sub-graphs
#  which convey information about the specimen preparation, the measurement of
#  the specimen in the electron microscope, the indexing of the collected
#  Kikuchi pattern stack, eventual post-processing of the indexed orientation
#  images via similarity grouping algorithms to yield (grains, texture).
#  Conceptually, these post-processing steps are most frequently serving
#  the idea how can one reconstruct so-called microstructural features
#  (grains, phases, interfaces) to  infer material properties.
#  In practice this calls for workflows which quantify correlations between
# the spatial arrangement of the microstructural features, the individual
#  (thermodynamic, chemo-mechanical) properties of the features with the
#  properties of materials at a coarser scale.
#  With NXem and related NXms base classes we propose a covering 
#  and general solution how to handle such (meta)data with NeXus.
