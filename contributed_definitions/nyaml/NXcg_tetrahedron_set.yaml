# it is useful to define own base classes for frequently used classes
# a polyhedron is a specific polytope in 3d, do we need
# higher-dimensional polytopes? that could be useful for simplicies though
# as they are used in numerics etc. maybe reach out here to our friends
# from MarDI, for now let's assume we do not need polytopes for d > 3
category: base
doc: |
  Computational geometry description of a set of tetrahedra in Euclidean space.
  
  The tetrahedra do not have to be connected.
  As tetrahedral elements they are among hexahedral elements one of the most
  frequently used geometric primitive for meshing and describing volumetric
  and surface descriptions of objects at the continuum scale.
  
  A set of tetrahedra in 3D Euclidean space.
  
  The tetrahedra do not have to be connected, can have different size,
  can intersect, and be rotated.
  
  Tetrahedra are the simplest and thus important geometrical primitive.
  They are frequently used as elements in finite element meshing/modeling.
  
  Tetrahedra have to be non-degenerated, closed, and built of triangles
  which are not self-intersecting.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  c: The cardinality of the set, i.e. the number of tetrahedra.
NXcg_tetrahedron_set:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
    enumeration: [3]
  cardinality(NX_POSINT):
    unit: NX_UNITLESS
  # qualifiers and properties of tetrahedra
  volume(NX_NUMBER):
    doc: Interior volume
    unit: NX_VOLUME
    dimensions:
      rank: 1
      dim: [[1, c]]
  center(NX_NUMBER):
    doc: |
      Position of the geometric center, which often is but not necessarily
      has to be the center_of_mass of the tetrahedra.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, c], [2, 3]]
  surface_area(NX_NUMBER):
    doc: Total surface area as the sum of all four triangular faces.
    unit: NX_AREA
    dimensions:
      rank: 1
      dim: [[1, c]]
  face_area(NX_NUMBER):
    doc: |
      Area of each of the four triangular faces of each tetrahedron.
    unit: NX_AREA
    dimensions:
      rank: 2
      dim: [[1, c], [2, 4]]
  edge_length(NX_NUMBER):
    doc: |
      Length of each edge of each tetrahedron.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, c], [2, 6]]
  (NXtransformations):
    doc: |
      Reference to or definition of a coordinate system with
      which the qualifiers and mesh data are interpretable.
  # substantially more detailed descriptors of the shape, the mesh
  # interior_angle(NX_NUMBER):
  #   doc: |
  #     Array of interior angle values. For each tetrahedron the quadruplet of
  #     angles is a sequence following the order of the vertices. The angle
  #     is the angle at the specific vertex. TODO lexiographical order.
  #     Winding order has to be interpreted to resolve the individual angles
  #     between edges of adjoining face triangles meeting at each corner/vertex.
  #   unit: NX_ANGLE
  #   dimensions:
  #     rank: 2
  #     dim: [[1, c], [2, 12]]
  identifier_offset(NX_INT):
    doc: |
      Integer which specifies the first index to be used for distinguishing
      tetrahedra. Identifiers are defined either implicitly
      or explicitly. For implicit indexing the identifiers are defined on the
      interval [identifier_offset, identifier_offset+c-1].
      For explicit indexing the identifier array has to be defined.
      
      The identifier_offset field can for example be used to communicate if the
      identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
      or from 0 (referred to as C-, Python-style index notation) respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: Integer used to distinguish tetrahedra for explicit indexing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  vertex_normal(NXcg_unit_normal_set):
  edge_normal(NXcg_unit_normal_set):
  face_normal(NXcg_unit_normal_set):
  # detailed mesh-based representation
  tetrahedra(NXcg_face_list_data_structure):
    # exists: [min, 0, max, 1]
    doc: |
      A simple approach to describe the entire set of tetrahedra when the
      main intention is to store the shape of the tetrahedra for visualization.
      should take the possibility to describe
  tetrahedron(NXcg_face_list_data_structure):
    # exists: [min, 0, max, infty]  # can this be max, c?
    doc: Disentangled representations of the mesh of specific tetrahedra.
  tetrahedron_half_edge(NXcg_half_edge_data_structure):
    # exists: [min, 0, max, infty]
    doc: |
      Disentangled representation of the planar graph that each tetrahedron
      represents. Such a description simplifies topological processing
      or analyses of mesh primitive operations and neighborhood queries.

