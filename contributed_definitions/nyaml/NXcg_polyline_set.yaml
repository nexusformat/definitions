category: base
doc: |
  Computational geometry description of a set of polylines in Euclidean space.
  
  Each polyline is built from a sequence of vertices (points with identifiers).
  Each polyline must have a start and an end point.
  The sequence describes the positive traversal along the polyline when walking
  from the start vertex to the end/last vertex.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  d: The dimensionality, which has to be at least 1.
  c: The cardinality of the set, i.e. the number of polylines.
  # n_unique: The number of unique vertices supporting the polyline.
  # multiple vertices possible with the same point coordinates but different names.
  n_v: The number of vertices, supporting the polylines.
  n_total: The total number of vertices traversed when visiting every polyline.
NXcg_polyline_set:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
  cardinality(NX_POSINT):
    unit: NX_UNITLESS
  # number_of_unique_vertices(NX_POSINT):
  #   unit: NX_UNITLESS
  number_of_total_vertices(NX_POSINT):
    doc: |
      The total number of vertices, irrespective of their eventual uniqueness,
      i.e. the total number of vertices that have to be visited when walking
      along each polyline.
    unit: NX_UNITLESS
  number_of_vertices(NX_POSINT):
    doc: |
      The number of vertices. If vertices are reduced to the unique ones, this
      number_of_vertices is not necessarily equal to the total number of vertices.
    unit: NX_UNITLESS
  (NXtransformations):
    doc: |
      Reference to or definition of a coordinate system with
      which the qualifiers and polyline data are interpretable.
  identifier_offset(NX_INT):
    doc: |
      Integer which specifies the first index to be used for distinguishing
      polylines. Identifiers are defined either implicitly
      or explicitly. For implicit indexing the identifiers are defined on the
      interval [identifier_offset, identifier_offset+c-1].
      For explicit indexing the identifier array has to be defined.
      
      The identifier_offset field can for example be used to communicate if the
      identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
      or from 0 (referred to as C-, Python-style index notation) respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: Integer used to distinguish polylines for explicit indexing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  vertices(NX_NUMBER):
    doc: |
      Positions of the vertices which support the members of the polyline set.
      
      Users are encouraged to reduce the vertices to unique set of positions
      and vertices as this supports a more efficient storage of the geometry data.
      It is also possible though to store the vertex positions naively in which
      case vertices_are_unique is likely False.
      Naively here means that one for example stores each vertex of a triangle
      mesh even though many vertices are shared between triangles and thus
      the positions of these vertices do not have to be duplicated.
    # Users are encouraged to reduce the vertex set to the unique vertices.
    # Unique means not necessarily unique in position only but also unique in
    # identifier. In fact, it is possible to distinguish two vertices as two when
    # they share the same position in space but have different identifiers.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, n_v], [2, d]]
  vertices_are_unique(NX_BOOLEAN):
    doc: |
      If true indicates that the vertices are all placed at different
      positions and have different identifiers, i.e. no points overlap
      or are counted twice.
  number_of_vertices(NX_POSINT):
    doc: |
      Array which specifies of how many vertices each polyline is built.
      The number of vertices represent the total number of vertices for
      each polyline, irrespectively whether vertices are shared or not.
      See the docstring for polylines for further details about how
      a set with different polyline members should be stored.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  polylines(NX_INT):
    doc: |
      Sequence of vertex identifiers which describe each polyline.
      
      A trivial example is a set with two polylines with three vertices each.
      If the polylines meet in a junction, say the second vertex is shared
      and marking the junction between the two polylines, it is possible that
      there are only five unique positions suggesting five unique vertices.
      
      A non-trivial example is a set with several polylines, each of which with
      eventually different number of vertices. The array stores the vertex
      identifiers in the order how the polylines are visited:
      
      The first entry is the identifier of the start vertex of the first polyline,
      followed by the second vertex of the first polyline, until the last vertex
      of the polyline. Thereafter, the start vertex of the second polyline, and
      so on and so forth. Using the (cumulated) counts in number_of_vertices,
      the vertices of the n-th polyline can be accessed on the following 
      array index interval:
      :math:`$[\sum_i = 0}^{i = N-1}, \sum_{i=0}^{i=N}]$`.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_total]]
  # properties of the polyline primitives
  length(NX_NUMBER):
    doc: The length of each polyline.
    unit: NX_LENGTH
    dimensions:
      rank: 1
      dim: [[1, c]]
  is_closed(NX_BOOLEAN):
    doc: |
      If true specifies that a polyline is closed, i.e.
      its end point is connected to the start point.
    dimensions:
      rank: 1
      dim: [[1, c]]
  vertex_normal(NXcg_unit_normal_set):
  edge_normal(NXcg_unit_normal_set):
