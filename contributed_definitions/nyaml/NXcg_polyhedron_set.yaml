# it is useful to define own base classes for frequently used classes
# a polyhedron is a specific polytope in 3d, do we need
# higher-dimensional polytopes? that could be useful for simplicies though
# as they are used in numerics etc. maybe reach out here to our friends
# from MarDI, for now let's assume we do not need polytopes for d > 3
# NeXus already supports polyhedra via NXoff_geometry
# the here proposed base class extends the capabilities to qualifiers of
# polyhedra and also half_edge_data_structures that can be useful
# for clean graph-based descriptions of polyhedra.
category: base
doc: |
  Computational geometry description of a polyhedra in Euclidean space.
  
  Polyhedra, also so-called cells (especially in the convex of tessellations),
  here described have to be all non-degenerated, closed, built of and thus
  built out of not-self-intersecting polygon meshes. Polyhedra may make contact,
  so that this base class can be used for a future description of tessellations.
  
  For more complicated manifolds and especially for polyhedra with holes, users
  are advised to check if their particular needs are described by creating
  (eventually customized) instances of an NXcg_polygon_set, which can be
  extended for the description of piecewise-linear complexes.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  c: The cardinality of the set, i.e. the number of polyhedra.
  n_e_total: The total number of edges for all polyhedra.
  n_f_total: The total number of faces for all polyhedra.
NXcg_polyhedron_set:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
    enumeration: [3]
  cardinality(NX_POSINT):
    unit: NX_UNITLESS
  # qualifiers and properties of polyhedra
  volume(NX_NUMBER):
    doc: Interior volume
    unit: NX_VOLUME
    dimensions:
      rank: 1
      dim: [[1, c]]
  center(NX_NUMBER):
    doc: |
      Position of the geometric center, which often is but not necessarily
      has to be the center_of_mass of the polyhedra.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, c], [2, 3]]
  surface_area(NX_NUMBER):
    doc: Total surface area as the sum of all faces.
    unit: NX_AREA
    dimensions:
      rank: 1
      dim: [[1, c]]
  number_of_faces(NX_POSINT):
    doc: |
      The number of faces for each polyhedron. Faces of adjoining polyhedra
      are counted for each polyhedron. This field can be used to interpret
      the array/field with the individual area values for each face.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  face_area(NX_NUMBER):
    doc: |
      Area of each of the four triangular faces of each tetrahedron.
    unit: NX_AREA
    dimensions:
      rank: 1
      dim: [[1, n_f_total]]
  number_of_edges(NX_POSINT):
    doc: |
      The number of edges for each polyhedron. Edges of adjoining polyhedra
      are counterd for each polyhedron. This field can be used to interpret
      the array/field with the individual length for each edge.
  edge_length(NX_NUMBER):
    doc: |
      Length of each edge of each tetrahedron.
    unit: NX_LENGTH
    dimensions:
      rank: 1
      dim: [[1, n_e_total]]
  (NXtransformations):
    doc: |
      Reference to or definition of a coordinate system with
      which the qualifiers and mesh data are interpretable.
  # substantially more detailed descriptors of the shape, the mesh
  identifier_offset(NX_INT):
    doc: |
      Integer which specifies the first index to be used for distinguishing
      polyhedra. Identifiers are defined either implicitly
      or explicitly. For implicit indexing the identifiers are defined on the
      interval [identifier_offset, identifier_offset+c-1].
      For explicit indexing the identifier array has to be defined.
      
      The identifier_offset field can for example be used to communicate if the
      identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
      or from 0 (referred to as C-, Python-style index notation) respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: Integer used to distinguish polyhedra for explicit indexing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, c]]
  vertex_normal(NXcg_unit_normal_set):
  edge_normal(NXcg_unit_normal_set):
  face_normal(NXcg_unit_normal_set):
  # detailed mesh-based representation
  polyhedra(NXcg_face_list_data_structure):
    # exists: [min, 0, max, 1]
    doc: |
      A simple approach to describe the entire set of polyhedra when the
      main intention is to store the shape of the polyhedra for visualization.
  polyhedron(NXcg_face_list_data_structure):
    # exists: [min, 0, max, infty]  # can this be max, c?
    doc: Disentangled representations of the mesh of specific polyhedron.
  polyhedron_half_edge(NXcg_half_edge_data_structure):
    # exists: [min, 0, max, infty]
    doc: |
      Disentangled representation of the planar graph that each polyhedron
      represents. Such a description simplifies topological processing
      or analyses of mesh primitive operations and neighborhood queries.
#   face_type(NX_UINT): #maybe a better name maybe topology, although this is misleading for the above-mentioned reasons
#     doc: A concatenated array, for each polygon face the number of vertices.
#     unit: NX_UNITLESS
#     dimensions:
#       rank: 1
#       dim: [[1, nfaces]]
# intersections between members? as a graph
# contact with external primitives like simulation domain etc