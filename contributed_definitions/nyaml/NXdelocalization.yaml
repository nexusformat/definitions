category: base
doc: |
  Base class to describe the delocalization of point-like objects on a grid.
  
  Such a procedure is for instance used in image processing and e.g. atom probe
  microscopy (APM) to discretize a point cloud onto a grid to enable e.g.
  computing of point density, composition, or concentration values, obtain
  scalar fields, and compute gradients of these fields.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  n_p: Number of points/objects.
  n_m: Number of mark data per point/object.
  n_atoms: Number of atoms in the whitelist.
  n_isotopes: Number of isotopes in the whitelist.
NXdelocalization:
  grid:
    doc: Reference or link to the grid on which the delocalization is applied.
  objects:
    doc: Reference or link to the points which are delocalized on the grid.
  # for APM the speciality is nothing but:
  # each point marks the location of an ion (object) in the tomographic reconstruction
  # there is a boolean mask which filters which ions, i.e. points are considered
  # plus there is a weight interpretation model, specifically in atom probe
  # if a (molecular) ion is decomposed into its atoms or isotopes
  # plus, given there is such a weight interpretation model, there is a weight
  # associated, specifically an integer >= 1 with each considered ion and 0 for
  # all ions which are not considered, 
  # this weight is the multiplicity with respect to the interpretation model
  # i.e. a C:2 molecular ion has a multiplicity of 2 if the ion is considered
  # and the interpretation model that to consider carbon atoms or carbon ions
  weighting_model:
    doc: |
      The weighting model specifies how mark data are mapped to a weight per point.
      For atom probe microscopy (APM) as an example, different models are used which
      account differently for the multiplicity of an ion/atom:
      
      * default, points all get the same weight 1.;
        for APM this is equivalent to ion species
      * atomic_decomposition, points get as much weight as they have atoms
        of a type in element_whitelist,
      * isotope_decomposition, points get as much weight as they have
        isotopes of a type in isotope_whitelist.
      
      This description shows an example that could be reinterpreted for
      similar such data processing steps in other fields of science.
    enumeration: [default, atomic_decomposition, isotope_decomposition]
    # other
    # can one conditionally set a field required if a weighting_model has a
    # specific value,
    # i.e. if atomic_decomposition is set element_whitelist t is required
    # i.e. if isotope_decomposition is set isotope_whitelist is required?
  element_whitelist(NX_UINT): # optional for atom probe
    doc: |
      A list of elements (via proton number) to consider for the atomic_decomposition
      weighting model. Elements must exist in the periodic table of elements.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_atoms]]
  isotope_whitelist(NX_UINT): # optional for atom probe
    doc: |
      A list of isotopes to consider for the isotope_decomposition weighting model.
      Isotopes must exist in the nuclid table. Entries in the fastest changing
      dimension should be the pair of proton (first entry) and neutron number
      (second entry).
    unit: NX_UNITLESS
    dimensions:
      rank: 2
      dim: [[1, n_isotopes], [2, 2]]
  mark(NX_NUMBER):
    doc: |
      Attribute data for each member of the point cloud. For APM these are the
      ion species labels generated via ranging. The number of mark data per
      point is 1 in the case for atom probe.
    dimensions:
      rank: 2
      dim: [[1, n_p], [2, n_m]]
  weight(NX_NUMBER):
    doc: |
      Weighting factor with which the integrated intensity per grid cell is
      multiplied specifically for each point. For APM the weight are positive
      integer values, specifically the multiplicity of the ion,
      according to the details of the weighting_model.
