category: base
doc: |
  Computational geeometry description of a half-edge data structure.
  
  Such a data structure can be used to efficiently circulate around faces
  and iterate over vertices of a planar graph.
# holes in the polygon mesh can be handled
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  d: The dimensionality, which has to be at least 2.
  n_v: The number of vertices.
  n_f: The number of faces.
  n_he: The number of half-edges.
NXcg_half_edge_data_structure:
  dimensionality(NX_POSINT):
    unit: NX_UNITLESS
  number_of_vertices(NX_POSINT):
    unit: NX_UNITLESS
  number_of_faces(NX_POSINT):
    unit: NX_UNITLESS
  number_of_half_edges(NX_POSINT):
    unit: NX_UNITLESS
  vertex_identifier_offset(NX_INT):
    doc: |
      In this half-edge data structure vertex identifiers start at 1.
      Vertices are identified with consecutive integers up to number_of_vertices.
      This field can be used to document which constant integer has to be
      added to another set of vertex_identifier to assure that these other
      identifiers also start at 1.
    unit: NX_UNITLESS
  face_identifier_offset(NX_INT):
    doc: |
      In this half-edge data structure face identifiers start at 1.
      Faces are identified with consecutive integers up to number_of_faces.
      This field can be used to document which constant integer has to be
      added to another set of face_identifier to assure that these other
      identifiers also start at 1.
      
      The face identifier zero is reserved for the NULL face !
    unit: NX_UNITLESS
  half_edge_identifier_offset(NX_INT):
    doc: |
      In this half-edge data structure half-edge identifiers start at 1.
      Half-edges are identified with consecutive integers up to number_of_half_edges.
      This field can be used to document which constant integer has to be
      added to another set of half_edge_identifier to assure that these other
      identifiers also start at 1.
    unit: NX_UNITLESS
  # therefore, vertex_-, face_-, half_edge_-identifier are implicit
  position(NX_NUMBER):
    doc: The position of the vertices.
    unit: NX_LENGTH
    dimensions:
      rank: 2
      dim: [[1, n_v], [2, d]]
  vertex_incident_half_edge(NX_UINT):
    doc: Identifier of the incident half-edge.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_v]]
  face_half_edge(NX_UINT):
    doc: Identifier of the (starting)/associated half-edge of the face.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_f]]
  half_edge_vertex_origin(NX_UINT):
    doc: |
      The identifier of the vertex from which this half-edge is outwards pointing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_he]]
  half_edge_twin(NX_UINT):
    doc: Identifier of the associated oppositely pointing half-edge.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_he]]
  half_edge_incident_face(NX_UINT):
    doc: |
      If the half-edge is a boundary half-edge the
      incident face identifier is NULL, i.e. 0.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_he]]
  half_edge_next(NX_UINT):
    doc: Identifier of the next half-edge.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_he]]
  half_edge_prev(NX_UINT):
    doc: Identifier of the previous half-edge.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_he]]
  weinberg_vector(NX_CHAR):
    doc: |
      Users are referred to the literature for the background of L. Weinberg's
      work about topological characterization of planar graphs:
      
      * `L. Weinberg 1966a, <https://dx.doi.org/10.1109/TCT.1964.1082216>`_  
      * `L. Weinberg, 1966b, <https://dx.doi.org/10.1137/0114062>`_  
      * `E. A. Lazar et al. <https://doi.org/10.1103/PhysRevLett.109.095505>`_  
      
      and how this work can e.g. be applied in space-filling tessellations
      of microstructural objects like crystals/grains.
# eventually store the Weinberg vector as an integer array
# which could be more efficient
# see https://jerryyin.info/geometry-processing-algorithms/half-edge/
# for an illustrative example of half-edge data structures
