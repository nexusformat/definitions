category: base
doc: |
  Computational geometry description of a set of primitives in Euclidean space.
  
  Primitives must neither be degenerated nor self-intersect.
  Individual primitives can differ in their properties (e.g. size, shape, rotation).
# this base class defines common fields and properties of geometric primitives
# more complex primitive sets like NXcg_cylinder_set are considered specializations
# of NXcg_primitive_set. They contain all fields and groups which NXcg_primitive_set
# defines. This is an action of compositing an information set; an act of inheriting
# TODO:: many properties of non-degenerate primitives are in the number set
# R+ instead of in R+0 but currently NeXus does not allow for such value range
# constraints unless the coarsely discretized NX_INT, NX_POSINT, NX_FLOAT
# but there is no say NX_FLOAT+0
# MK::but in computational geometry numerical precision matters as it defines
# whether objects numerically intersect or not and thus it can make a real difference
# if one stores triangles with 16, 32, or 64 bit precision, however:
# are two triangle_set instance A and B no longer conceptually triangle sets
# because A stores the positions of vertices using int8 while B stores such using float64 ?
# we here assume that we still conceptually talk that A and B are triangle sets
# but this brings at the level of the application definition the problem that if the
# precision is not properly constrainted a consuming application will not obtain
# the instances of the concept triangle_set with relevant high enough precision
# and thus neither the base class nor the application definition is specific enough
# for what it was designed in the first place - be specific about the requirements
# on your data...
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  d: |
    The dimensionality of the space.
  c: |
    The cardinality of the set, i.e. the number of members.
type: group
NXcg_primitive_set(NXobject):
  # individual specializations like NXcg_polyline_set typically overwrite
  # the meaning of the depends_on concept to build consistent inference chains
  # to enable an instantiation of the actual geometric primitives
  \@depends_on(NX_CHAR):
    doc: |
      Hint to help resolve in which Euclidean coordinate system field values
      like center or orientation are defined.
  dimensionality(NX_POSINT):
    doc: |
      The dimensionality of the primitive set.
    unit: NX_UNITLESS
    enumeration: [1, 2, 3]
  cardinality(NX_POSINT):
    doc: |
      The cardinality of the primitive set.
    unit: NX_UNITLESS
  identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the set differs from zero.
      
      Identifiers can be defined either implicitly or explicitly.
      For implicit indexing identifiers are defined on the interval
      :math:`[identifier_offset, identifier_offset + c - 1]`.
      
      Therefore, implicit identifier are completely defined by the value of
      identifier_offset and cardinality. For example if identifier run from
      -2 to 3 the value for identifier_offset is -2.
      
      For explicit indexing the field identifier has to be used.
      Fortran-/Matlab- and C-/Python-style indexing have specific implicit
      identifier conventions where identifier_offset is 1 and 0 respectively.
    unit: NX_UNITLESS
  identifier(NX_INT):
    doc: |
      Identifier of each member for explicit indexing.
    dim: (c,)  # numpy style indexing
  center(NX_NUMBER):
    doc: |
      The center of mass position of each primitive.
    unit: NX_ANY
    dim: (c, d)
    # a depends_on to define in which coordinate system
  is_center_of_mass(NX_BOOLEAN):
    doc: |
      True if the center is a center of mass.
    dim: (c,)
  shape(NX_NUMBER):
    doc: |
      A qualitative description of the shape of each primitive.
    unit: NX_LENGTH
    dim: (c, d)
  length(NX_NUMBER):
    doc: |
      Qualifier for the length of characteristic features of the primitive.
      
      Often the term length is associated with the assumption that one
      edge is parallel to an axis of the coordinate system.
    unit: NX_LENGTH
    dim: (c,)
  width(NX_NUMBER):
    doc: |
      Qualifier often used to describe the length of one characteristic edge
      within the coordinate system.
    unit: NX_LENGTH
    dim: (c,)
  is_closed(NX_BOOLEAN):
    doc: |
      True if primitive is closed such that it has properties like area or volume.
    dim: (c,)
  volume(NX_NUMBER):
    doc: |
      Volume of each primitive.
      
      Set to NaN if does not apply for primitives for which is_closed is False.
    unit: NX_VOLUME
    dim: (c,)
  area(NX_NUMBER):
    doc: |
      Alias for surface_area of each primitive.
      
      Set to NaN if does not apply for primitives for which is_closed is False.
    unit: NX_AREA
    dim: (c,)
  orientation(NX_NUMBER):
    doc: |
      Direction unit vector which points along the
      longest principal axis of each primitive.
      
      Use the depends_on attribute to specify in which coordinate system
      these direction unit vectors are defined.
    unit: NX_DIMENSIONLESS
    dim: (c, d)
  vertex_normal(NXcg_unit_normal_set):
  edge_normal(NXcg_unit_normal_set):
  face_normal(NXcg_unit_normal_set):
  # roi(NXcg_parallelogram_set or NXcg_hexahedron_set)
  # aabb(NXcg_parallelogram_set or NXcg_hexahedron_set)
  # obb(NXcg_parallelogram_set or NXcg_hexahedron_set)
  # MK::one could add (NXcg_parallelogram_set) and/or (NXcg_hexahedron_set)
  # but then one would not give any hint at the base class level how to name
