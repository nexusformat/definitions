.. _CC-Apm-Structure:

=====================
Atom Probe Microscopy
=====================

.. index::
   CC-Apm-Introduction
   CC-Apm-Definitions
   CC-Apm-Paraprobe-Introduction
   CC-Apm-Paraprobe-Status-Quo
   CC-Apm-Paraprobe-Application-Definitions
   CC-Apm-Paraprobe-German-NFDI

.. _CC-Apm-Introduction:

Introduction
##############

For the use case atom probe tomography the community contributed not only the :ref:`NXapm` application definition.
It was also explored how using several instances of :ref:`NXprocess` is useful for documenting the many data
processing steps that are typical in atom probe research to investigate structural features of the material
demanding reconstructions, i.e., models of the crystal and defect network by analyzing the collective position
data of atoms. The following definitions are a summary of the status quo how NeXus can be used for documenting
these processing steps to improve numerical reproducibility and assist researchers with documenting procedural
aspects of their data analysis workflows.

.. _CC-Apm-Definitions:

Base Classes
############

The processing steps of ranging and reconstructing are documented as two specializations of :ref:`NXprocess`:

:ref:`NXapm_input_ranging`
    Metadata to ranging definitions made for a dataset in atom probe microscopy.

:ref:`NXapm_input_reconstruction`
    Metadata of a dataset (tomographic reconstruction) in atom probe microscopy.

Spatial or other type of filters which are frequently used for atom probe to select specific atom positions
or portions of the data based on isotopic identity are modeled as base classes for filters, which are
defined atom-probe-agnostic empower reuse:

:ref:`NXdelocalization`
    Base class to describe the delocalization of point-like objects on a grid.
    
:ref:`NXisocontour`
    Computational geometry description of isocontouring/phase-fields in Euclidean space.
    
:ref:`NXmatch_filter`
    Base class to filter ions based on their type or other descriptors like hit multiplicity.

:ref:`NXspatial_filter`
    Base class to filter based on position. This base class takes advantage of :ref:`NXcg_ellipsoid`,
    :ref:`NXcg_cylinder`, and :ref:`NXcg_hexahedron` to cater for commonly used geometric primitives
    in atom probe. The primitives are used for defining the shape and extent of a
    region of interest (ROI) :ref:`NXroi_process`.

:ref:`NXsubsampling_filter`
    Base class for a filter that can also be used for specifying how entries
    like ions can be filtered via sub-sampling.

.. _CC-Apm-Paraprobe-Introduction:

Tools and applications in APM
#############################

There exist several research software tools in the APM community that deal with handling and analyzing APM data.

One of these is the `paraprobe-toolbox <https://paraprobe-toolbox.readthedocs.io/>`_
The software is developed by `M. KÃ¼hbach et al. <https://arxiv.org/abs/2205.13510>`_.

The paraprobe-toolbox is an example of an open-source parallelized software for analyzing
point cloud data, for assessing meshes in 3D continuum space, and for studying the effects of
parameterization on descriptors of micro- and nanoscale structural features (crystal defects)
within materials when characterized and studied with atom probe.

There is a set of contributed application definitions describing each computational step in the 
paraprobe-toolbox. These were added to describe the whole workflow in this particular software,
but can also act as a blueprint for how computational steps of other software tools
(including commercial ones) could be developed further to benefit from NeXus.

The need for a thorough documentation of the tools was motivated by several needs:

First, users of software would like to better understand and also be able to study for themselves
which individual parameters and settings for each tool exist and how configuring these
affects analyses quantitatively. This stresses the aspect how to improve documentation.

Second, scientific software like paraprobe-toolbox implement numerical/algorithmical
(computational) workflows whereby data coming from multiple input sources
(like previous analysis results) are processed and carried through more involved analyses
within several steps inside the tool. The tool then creates output as files. This
provenance and workflow should be documented.

Individual tools of paraprobe-toolbox are developed in C/C++ and/or Python.
Provenance tracking is useful as it is one component and requirement for making
workflows exactly numerically reproducible and thus to enable reproducibility
(the "R" of the FAIR principles of data stewardship).

For tools of the paraprobe-toolbox each workflow step is a pair or triple of sub-steps:
1. The creation of a configuration file. 
2. The actual analysis using a given Python/or C/C++ tool from the toolbox. 
3. The optional analyses/visualization of the results based on data in NeXus/HDF5 files generated by each tool. 

Data and metadata between the tools are exchanged with NeXus/HDF5 files. This means that data
inside HDF5 binary containers are named, formatted, and hierarchically structured according
to NeXus application definitions.

In a refactoring project, within the FAIRmat project, which is part of the `German
National Research Data Infrastructure <https://www.nfdi.de/?lang=en>`_, the tools of the
paraprobe-toolbox were modified to read from and write data using NeXus application definitions.

For example the application definition :ref:`NXapm_paraprobe_config_surfacer`: specifies
the expectation how a configuration file for the paraprobe-surfacer tool is formatted
and which parameters it contains including optionality and cardinality constraints.

Thereby, each config file uses a controlled vocabulary of terms. The config files store
SHA256 checksum for each input file, thereby implementing an uninterrupted
provenance tracking chain documenting the computational workflow.

As an example, a user may first range their reconstruction and then compute spatial
correlation functions. The config file for the ranging tool stores the files
which hold the reconstructed ion position and ranging definitions.
The ranging tool generates a results file with the labels of each molecular ion.
This results file is formatted according to the tool-specific `results`
application definition. The generated results file and the reconstruction is
imported by the spatial statistics tool which again keeps track of all files
and reports its results in a spatial statistics tool results file.

This design makes it possible to rigorously trace which numerical results were achieved
with specific inputs and settings using specifically-versioned tools. Noteworthy,
this includes Y-junction on a graph which is where multiple input sources are
combined to generate new results.

Defining, documenting, using, and sharing application definitions is a useful and future-proof 
strategy for software development and data analyses as it enables automated provenance
tracking working silently in the background.

In summary, the following application definitions were defined for the paraprobe-toolbox.
These are always pairs of application definitions --- one for the configuration (input) side
and one for the results (output) side. For each tool one such pair is proposed:

.. _CC-Apm-Paraprobe-Application-Definitions:

Application Definitions
#######################

:ref:`NXapm_paraprobe_config_clusterer`, :ref:`NXapm_paraprobe_results_clusterer`
    Configuration and results respectively of the paraprobe-clusterer tool.
    Compute cluster analyses with established machine learning algorithms using CPU or GPUs.

:ref:`NXapm_paraprobe_config_distancer`, :ref:`NXapm_paraprobe_results_distancer`
    Configuration and results respectively of the paraprobe-distancer tool.
    Compute and store analytical distances between ions to a set of triangles.

:ref:`NXapm_paraprobe_config_intersector`, :ref:`NXapm_paraprobe_results_intersector`
    Configuration and results resepctively of the paraprobe-intersector tool.
    Analyze volumetric intersections and proximity of 3D objects discretized as triangulated surface meshes
    in continuum space to study the effect the parameterization of surface extraction algorithms on the
    resulting shape, spatial arrangement, and colocation of 3D objects via graph-based techniques.

:ref:`NXapm_paraprobe_config_nanochem`, :ref:`NXapm_paraprobe_results_nanochem`
    Configuration and results resepctively of the paraprobe-nanochem tool.
    Compute delocalization, iso-surfaces, analyze 3D objects, composition profiles, and mesh interfaces.

:ref:`NXapm_paraprobe_config_ranger`, :ref:`NXapm_paraprobe_results_ranger`
    Configuration and results respectively of the paraprobe-ranger tool.
    Apply ranging definitions and explore possible molecular ions.
    Store applied ranging definitions and combinatorial analyses of possible iontypes.

:ref:`NXapm_paraprobe_config_selector`, :ref:`NXapm_paraprobe_results_selector`
    Configuration and results respectively of the paraprobe-selector tool.
    Defining complex spatial regions-of-interest to filter reconstructed datasets.
    Store which points are inside or on the boundary of complex spatial regions-of-interest.

:ref:`NXapm_paraprobe_config_spatstat`, :ref:`NXapm_paraprobe_results_spatstat`
    Configuration and results respectively of the paraprobe-spatstat tool.
    Compute spatial statistics on the entire or selected regions of the reconstructed dataset.

:ref:`NXapm_paraprobe_config_surfacer`, :ref:`NXapm_paraprobe_results_surfacer`
    Configuration and results respectively of the paraprobe-surfacer tool.
    Create a model for the edge of a point cloud via convex hulls, alpha shapes, or alpha-wrappings.
    Store triangulated surface meshes of models for the edge of a dataset.

:ref:`NXapm_paraprobe_config_tessellator`, :ref:`NXapm_paraprobe_results_tessellator`
    Configuration and results respectively of the paraprobe-tessellator tool.
    Compute and store Voronoi cells and properties of these for all ions in a dataset.

:ref:`NXapm_paraprobe_config_transcoder`, :ref:`NXapm_paraprobe_results_transcoder`
    Configuration and the results respectively of the paraprobe-transcoder tool.
    Load common file formats of the atom probe community POS, ePOS, APSuite APT, RRNG, RNG,
    and generate NeXus/HDF5 files that comply with the :ref:`NXapm` application definition.
    Store reconstructed positions, ions, and charge states.

.. _CC-Apm-Paraprobe-German-NFDI:

Joint work German NFDI consortia NFDI-MatWerk and FAIRmat
#######################################################################

Members of the NFDI-MatWerk and the FAIRmat consortium of the German National Research Data Infrastructure
are working together within the Infrastructure Use Case IUC09 of the NFDI-MatWerk project to work on examples
how software tools in both consortia become better documented and interoperable to use. Within this project,
we have also added the `CompositionSpace` tool that has been developed at the
Max Planck Institute for Sustainable Materials in DÃ¼sseldorf <https://github.com/eisenforschung/CompositionSpace>`_ by A. Saxena et al.

:ref:`NXapm_composition_space_results`
    Results of a run with Alaukik Saxena's composition space tool.


