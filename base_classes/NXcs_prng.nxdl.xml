<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2022-2024 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" type="group" name="NXcs_prng" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
            The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
    </symbols>
    <doc>
        Computer science description of pseudo-random number generator.
        
        The purpose of this base class is to identify if exactly the same sequence can be
        reproduced, like for a PRNG or not, like for a true physically random source.
    </doc>
    <field name="type" type="NX_CHAR">
        <doc>
            Physical approach or algorithm whereby random numbers are generated.
            
            Different approaches for generating random numbers with a computer exists.
            Some use a dedicated physical device whose the state is unpredictable
            physically. Some use a strategy of mangling information from the system
            clock. Also in this case the sequence is not reproducible without having
            additional pieces of information.
            
            In most cases though so-called pseudo-random number generator (PRNG)
            algorithms are used. These yield a deterministic sequence of practically
            randomly appearing numbers. These algorithms differ in their quality in
            how random the resulting sequences actually are, i.e. sequentially
            uncorrelated. Nowadays one of the most commonly used algorithm is the
            MersenneTwister (mt19937).
        </doc>
        <enumeration>
            <item value="physical"/>
            <item value="system_clock"/>
            <item value="mt19937"/>
            <item value="other"/>
        </enumeration>
    </field>
    <group type="NXprogram">
        <doc>
            Name of the PRNG implementation and version. If such information is not
            available or if the PRNG type was set to other the DOI to the publication
            or the source code should be given.
        </doc>
    </group>
    <field name="seed" type="NX_INT" units="NX_UNITLESS">
        <doc>
            Parameter of the PRNG controlling its initialization
            and thus controlling the specific sequence generated.
        </doc>
    </field>
    <field name="warmup" type="NX_UINT" units="NX_UNITLESS">
        <doc>
            Number of initial draws from the PRNG after its initialized with the seed.
            These initial draws are typically discarded in an effort to equilibrate the
            sequence. If no warmup was performed or if warmup procedures are unclear,
            users should set the value to zero.
        </doc>
    </field>
    <!--one could add spectral properties but this is usually well documented in the PRNG literature
one could also think about making reference to the NIST PRNG test suite to qualify the PRNG-->
</definition>
