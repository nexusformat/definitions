<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2022-2025 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" type="group" name="NXcs_profiling" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
            The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
    </symbols>
    <doc>
        Computer science description for performance and profiling data of an application.
        
        Performance monitoring and benchmarking of software is a task where questions
        can be asked at various levels of detail. In general, there are three main
        contributions to performance:
        
        * Hardware capabilities and configuration
        * Software configuration and capabilities
        * Dynamic effects of the system in operation and the system working together
          with eventually multiple computers, especially when these have to exchange
          information across a network and these are used usually by multiple users.
        
        At the most basic level users may wish to document how long e.g. a data
        analysis with a scientific software i.e. an app took.
        A frequent idea is here to answer practical questions like how critical is the
        effect on the workflow of the scientists, i.e. is the analysis possible in
        a few seconds or would it take days if I were to run this analysis on a
        comparable machine?
        For this more qualitative performance monitoring, mainly the order of
        magnitude is relevant, as well as how this was achieved using parallelization
        (i.e. reporting the number of CPU and GPU resources used, the number of
        processes and threads configured, and providing basic details about the computer).
        
        At more advanced levels benchmarks may go as deep as detailed temporal tracking
        of individual processor instructions, their relation to other instructions, the
        state of call stacks; in short eventually the entire app execution history
        and hardware state history. Such analyses are mainly used for performance
        optimization, i.e. by software and hardware developers as well as for
        tracking bugs. Specialized software exists which documents such performance
        data in specifically-formatted event log files or databases.
        
        This base class cannot and should not replace these specific solutions for now.
        Instead, the intention of the base class is to serve scientists at the
        basic level to enable simple monitoring of performance data and log profiling
        data of key algorithmic steps or parts of computational workflows, so that
        these pieces of information can guide users which order of magnitude differences
        should be expected or not.
        
        Developers of application definitions should add additional fields and
        references to e.g. more detailed performance data to which they wish to link
        the metadata in this base class.
    </doc>
    <!--details about queuing systems etc-->
    <field name="current_working_directory" type="NX_CHAR">
        <doc>
            Path to the directory from which the tool was called.
        </doc>
    </field>
    <field name="command_line_call" type="NX_CHAR">
        <doc>
            Command line call with arguments if applicable.
        </doc>
    </field>
    <field name="start_time" type="NX_DATE_TIME">
        <doc>
            ISO 8601 time code with local time zone offset to UTC information
            included when the app was started.
        </doc>
    </field>
    <field name="end_time" type="NX_DATE_TIME">
        <doc>
            ISO 8601 time code with local time zone offset to UTC information
            included when the app terminated or crashed.
        </doc>
    </field>
    <field name="total_elapsed_time" type="NX_NUMBER" units="NX_TIME">
        <doc>
            Wall-clock time how long the app execution took. This may be in principle
            end_time minus start_time; however usage of eventually more precise timers
            may warrant to use a finer temporal discretization,
            and thus demands a more precise record of the wall-clock time.
        </doc>
    </field>
    <field name="max_processes" type="NX_UINT" units="NX_UNITLESS">
        <doc>
            The number of nominal processes that the app invoked at runtime.
            
            The main idea behind this field e.g. for apps which use e.g. MPI
            (Message Passing Interface) parallelization is to communicate
            how many processes were used.
            
            For sequentially running apps number_of_processes and number_of_threads
            is one. If the app exclusively uses GPU parallelization, number_of_gpus
            can be larger than one. If no GPU is used, number_of_gpus is zero,
            even though the hardware may have GPUs installed.
        </doc>
    </field>
    <field name="max_threads" type="NX_UINT" units="NX_UNITLESS">
        <doc>
            The number of nominal threads that the app invoked at runtime.
            Specifically here the maximum number of threads used for the
            high-level threading library used (e.g. OMP_NUM_THREADS), posix.
        </doc>
    </field>
    <field name="max_gpus" type="NX_UINT" units="NX_UNITLESS">
        <doc>
            The number of nominal GPUs that the app invoked at runtime.
        </doc>
    </field>
    <!--there are more complicated usage models, where GPUs are activated in
between runs etc, but here application definition and base class developers
should feel free to suggest customizations wrt to if and how such more
complicated models should be captured.-->
    <group type="NXcs_computer">
        <doc>
            A collection with one or more computing nodes each with own resources.
            This can be as simple as a laptop or the nodes of a cluster computer.
        </doc>
    </group>
    <group name="eventID" type="NXcs_profiling_event" nameType="partial">
        <doc>
            A collection of individual profiling event data which detail e.g. how
            much time the app took for certain computational steps and/or how much
            memory was consumed during these operations.
            ID is an increasing unsigned integer starting at 1.
        </doc>
    </group>
    <!--how to retrieve UUID for cloud computing instances
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/identify_ec2_instances.html-->
</definition>
